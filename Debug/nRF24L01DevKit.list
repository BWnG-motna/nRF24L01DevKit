
nRF24L01DevKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800593c  0800593c  0000693c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ca0  08005ca0  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ca0  08005ca0  00006ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ca8  08005ca8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005ca8  08005ca8  00006ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08005cb0  08005cb0  00006cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005cb8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b30  20000060  08005d18  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b90  08005d18  00007b90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001335a  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003237  00000000  00000000  0001a3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0001d620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d31  00000000  00000000  0001e728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006296  00000000  00000000  0001f459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012da5  00000000  00000000  000256ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ff9e  00000000  00000000  00038494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8432  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e0c  00000000  00000000  000d8478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000dd284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000060 	.word	0x20000060
 8000200:	00000000 	.word	0x00000000
 8000204:	08005924 	.word	0x08005924

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000064 	.word	0x20000064
 8000220:	08005924 	.word	0x08005924

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f001 fdb8 	bl	8001dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f811 	bl	8000262 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f938 	bl	80004b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000244:	f000 f8e2 	bl	800040c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000248:	f000 f874 	bl	8000334 <MX_SPI1_Init>
  MX_TIM6_Init();
 800024c:	f000 f8a8 	bl	80003a0 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000250:	f000 f906 	bl	8000460 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000254:	f000 f84a 	bl	80002ec <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  MainProc() ;
 8000258:	f000 f9cc 	bl	80005f4 <MainProc>
 800025c:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */
  }
#endif
  /* USER CODE END 3 */
}
 800025e:	4618      	mov	r0, r3
 8000260:	bd80      	pop	{r7, pc}

08000262 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000262:	b580      	push	{r7, lr}
 8000264:	b090      	sub	sp, #64	@ 0x40
 8000266:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000268:	f107 0318 	add.w	r3, r7, #24
 800026c:	2228      	movs	r2, #40	@ 0x28
 800026e:	2100      	movs	r1, #0
 8000270:	4618      	mov	r0, r3
 8000272:	f004 ff33 	bl	80050dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000284:	2301      	movs	r3, #1
 8000286:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800028c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	2302      	movs	r3, #2
 8000298:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800029e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 faae 	bl	800280c <HAL_RCC_OscConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b6:	f000 f997 	bl	80005e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	230f      	movs	r3, #15
 80002bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002be:	2302      	movs	r3, #2
 80002c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2102      	movs	r1, #2
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 fd1b 	bl	8002d10 <HAL_RCC_ClockConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002e0:	f000 f982 	bl	80005e8 <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3740      	adds	r7, #64	@ 0x40
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2101      	movs	r1, #1
 80002f4:	2023      	movs	r0, #35	@ 0x23
 80002f6:	f001 fe64 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80002fa:	2023      	movs	r0, #35	@ 0x23
 80002fc:	f001 fe7d 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000300:	2200      	movs	r2, #0
 8000302:	2101      	movs	r1, #1
 8000304:	2025      	movs	r0, #37	@ 0x25
 8000306:	f001 fe5c 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800030a:	2025      	movs	r0, #37	@ 0x25
 800030c:	f001 fe75 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* TIM6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8000310:	2200      	movs	r2, #0
 8000312:	2101      	movs	r1, #1
 8000314:	2036      	movs	r0, #54	@ 0x36
 8000316:	f001 fe54 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800031a:	2036      	movs	r0, #54	@ 0x36
 800031c:	f001 fe6d 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000320:	2200      	movs	r2, #0
 8000322:	2101      	movs	r1, #1
 8000324:	2006      	movs	r0, #6
 8000326:	f001 fe4c 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800032a:	2006      	movs	r0, #6
 800032c:	f001 fe65 	bl	8001ffa <HAL_NVIC_EnableIRQ>
}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}

08000334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000338:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <MX_SPI1_Init+0x64>)
 800033a:	4a18      	ldr	r2, [pc, #96]	@ (800039c <MX_SPI1_Init+0x68>)
 800033c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033e:	4b16      	ldr	r3, [pc, #88]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000340:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000346:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800034c:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <MX_SPI1_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000352:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000354:	2202      	movs	r2, #2
 8000356:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <MX_SPI1_Init+0x64>)
 800035a:	2201      	movs	r2, #1
 800035c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800035e:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000364:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000368:	2210      	movs	r2, #16
 800036a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036c:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <MX_SPI1_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000372:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000378:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <MX_SPI1_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800037e:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000380:	220a      	movs	r2, #10
 8000382:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	@ (8000398 <MX_SPI1_Init+0x64>)
 8000386:	f002 fe81 	bl	800308c <HAL_SPI_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000390:	f000 f92a 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000007c 	.word	0x2000007c
 800039c:	40013000 	.word	0x40013000

080003a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a6:	463b      	mov	r3, r7
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <MX_TIM6_Init+0x64>)
 80003b0:	4a15      	ldr	r2, [pc, #84]	@ (8000408 <MX_TIM6_Init+0x68>)
 80003b2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 720-1;
 80003b4:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <MX_TIM6_Init+0x64>)
 80003b6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80003ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003bc:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <MX_TIM6_Init+0x64>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 80003c2:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <MX_TIM6_Init+0x64>)
 80003c4:	2263      	movs	r2, #99	@ 0x63
 80003c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <MX_TIM6_Init+0x64>)
 80003ca:	2280      	movs	r2, #128	@ 0x80
 80003cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80003ce:	480d      	ldr	r0, [pc, #52]	@ (8000404 <MX_TIM6_Init+0x64>)
 80003d0:	f003 fcf5 	bl	8003dbe <HAL_TIM_Base_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80003da:	f000 f905 	bl	80005e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003de:	2300      	movs	r3, #0
 80003e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80003e6:	463b      	mov	r3, r7
 80003e8:	4619      	mov	r1, r3
 80003ea:	4806      	ldr	r0, [pc, #24]	@ (8000404 <MX_TIM6_Init+0x64>)
 80003ec:	f003 ff30 	bl	8004250 <HAL_TIMEx_MasterConfigSynchronization>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80003f6:	f000 f8f7 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200000d4 	.word	0x200000d4
 8000408:	40001000 	.word	0x40001000

0800040c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000410:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000412:	4a12      	ldr	r2, [pc, #72]	@ (800045c <MX_USART1_UART_Init+0x50>)
 8000414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000416:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800041c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000442:	4805      	ldr	r0, [pc, #20]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000444:	f003 ff82 	bl	800434c <HAL_UART_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800044e:	f000 f8cb 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	2000011c 	.word	0x2000011c
 800045c:	40013800 	.word	0x40013800

08000460 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000464:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <MX_USART3_UART_Init+0x4c>)
 8000466:	4a12      	ldr	r2, [pc, #72]	@ (80004b0 <MX_USART3_UART_Init+0x50>)
 8000468:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800046a:	4b10      	ldr	r3, [pc, #64]	@ (80004ac <MX_USART3_UART_Init+0x4c>)
 800046c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000470:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <MX_USART3_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000478:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <MX_USART3_UART_Init+0x4c>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <MX_USART3_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000484:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <MX_USART3_UART_Init+0x4c>)
 8000486:	220c      	movs	r2, #12
 8000488:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048a:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <MX_USART3_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000490:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <MX_USART3_UART_Init+0x4c>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000496:	4805      	ldr	r0, [pc, #20]	@ (80004ac <MX_USART3_UART_Init+0x4c>)
 8000498:	f003 ff58 	bl	800434c <HAL_UART_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004a2:	f000 f8a1 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000164 	.word	0x20000164
 80004b0:	40004800 	.word	0x40004800

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c8:	4b35      	ldr	r3, [pc, #212]	@ (80005a0 <MX_GPIO_Init+0xec>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a34      	ldr	r2, [pc, #208]	@ (80005a0 <MX_GPIO_Init+0xec>)
 80004ce:	f043 0320 	orr.w	r3, r3, #32
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b32      	ldr	r3, [pc, #200]	@ (80005a0 <MX_GPIO_Init+0xec>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0320 	and.w	r3, r3, #32
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e0:	4b2f      	ldr	r3, [pc, #188]	@ (80005a0 <MX_GPIO_Init+0xec>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a2e      	ldr	r2, [pc, #184]	@ (80005a0 <MX_GPIO_Init+0xec>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b2c      	ldr	r3, [pc, #176]	@ (80005a0 <MX_GPIO_Init+0xec>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0304 	and.w	r3, r3, #4
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f8:	4b29      	ldr	r3, [pc, #164]	@ (80005a0 <MX_GPIO_Init+0xec>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a28      	ldr	r2, [pc, #160]	@ (80005a0 <MX_GPIO_Init+0xec>)
 80004fe:	f043 0310 	orr.w	r3, r3, #16
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <MX_GPIO_Init+0xec>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0310 	and.w	r3, r3, #16
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000510:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <MX_GPIO_Init+0xec>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a22      	ldr	r2, [pc, #136]	@ (80005a0 <MX_GPIO_Init+0xec>)
 8000516:	f043 0308 	orr.w	r3, r3, #8
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <MX_GPIO_Init+0xec>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0308 	and.w	r3, r3, #8
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED3_Pin|DEBUG_LED2_Pin|DEBUG_LED1_Pin, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	210e      	movs	r1, #14
 800052c:	481d      	ldr	r0, [pc, #116]	@ (80005a4 <MX_GPIO_Init+0xf0>)
 800052e:	f002 f923 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CE_GPIO_Port, SPI1_CE_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2110      	movs	r1, #16
 8000536:	481c      	ldr	r0, [pc, #112]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 8000538:	f002 f91e 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2120      	movs	r1, #32
 8000540:	4819      	ldr	r0, [pc, #100]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 8000542:	f002 f919 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED3_Pin DEBUG_LED2_Pin DEBUG_LED1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED3_Pin|DEBUG_LED2_Pin|DEBUG_LED1_Pin;
 8000546:	230e      	movs	r3, #14
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2302      	movs	r3, #2
 8000554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	4619      	mov	r1, r3
 800055c:	4811      	ldr	r0, [pc, #68]	@ (80005a4 <MX_GPIO_Init+0xf0>)
 800055e:	f001 feab 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CE_Pin SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_CSN_Pin;
 8000562:	2330      	movs	r3, #48	@ 0x30
 8000564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056e:	2303      	movs	r3, #3
 8000570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000572:	f107 0310 	add.w	r3, r7, #16
 8000576:	4619      	mov	r1, r3
 8000578:	480b      	ldr	r0, [pc, #44]	@ (80005a8 <MX_GPIO_Init+0xf4>)
 800057a:	f001 fe9d 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800057e:	2301      	movs	r3, #1
 8000580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000582:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <MX_GPIO_Init+0xf8>)
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000586:	2301      	movs	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	4619      	mov	r1, r3
 8000590:	4807      	ldr	r0, [pc, #28]	@ (80005b0 <MX_GPIO_Init+0xfc>)
 8000592:	f001 fe91 	bl	80022b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000596:	bf00      	nop
 8000598:	3720      	adds	r7, #32
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800
 80005a8:	40011000 	.word	0x40011000
 80005ac:	10210000 	.word	0x10210000
 80005b0:	40010c00 	.word	0x40010c00

080005b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d101      	bne.n	80005ca <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80005c6:	f001 fc07 	bl	8001dd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  	if( htim->Instance == TIM6 )
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a05      	ldr	r2, [pc, #20]	@ (80005e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d101      	bne.n	80005d8 <HAL_TIM_PeriodElapsedCallback+0x24>
  	{
  		TimIrq() ;
 80005d4:	f000 f88c 	bl	80006f0 <TimIrq>
  	}
  /* USER CODE END Callback 1 */
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40001400 	.word	0x40001400
 80005e4:	40001000 	.word	0x40001000

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <Error_Handler+0x8>

080005f4 <MainProc>:

static bool oneSecIrq = false ;


void MainProc()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0
	uart.Begin() ;
 80005fa:	481c      	ldr	r0, [pc, #112]	@ (800066c <MainProc+0x78>)
 80005fc:	f001 fa2d 	bl	8001a5a <_ZN6daniel5USART5BeginEv>
	uart.SendMessage( "\r\n\r\n" ) ;
 8000600:	491b      	ldr	r1, [pc, #108]	@ (8000670 <MainProc+0x7c>)
 8000602:	481a      	ldr	r0, [pc, #104]	@ (800066c <MainProc+0x78>)
 8000604:	f001 fb12 	bl	8001c2c <_ZNK6daniel5USART11SendMessageEPKcz>

	rf.SetUart( & uart ) ;
 8000608:	4918      	ldr	r1, [pc, #96]	@ (800066c <MainProc+0x78>)
 800060a:	481a      	ldr	r0, [pc, #104]	@ (8000674 <MainProc+0x80>)
 800060c:	f000 fe44 	bl	8001298 <_ZN6daniel8nRF24L017SetUartEPNS_5USARTE>
	rf.Begin( rfMode ) ;
 8000610:	4919      	ldr	r1, [pc, #100]	@ (8000678 <MainProc+0x84>)
 8000612:	4818      	ldr	r0, [pc, #96]	@ (8000674 <MainProc+0x80>)
 8000614:	f000 f93a 	bl	800088c <_ZN6daniel8nRF24L015BeginERKNS_6RfModeE>

	HAL_TIM_Base_Start_IT( &htim6 ) ;
 8000618:	4818      	ldr	r0, [pc, #96]	@ (800067c <MainProc+0x88>)
 800061a:	f003 fc1f 	bl	8003e5c <HAL_TIM_Base_Start_IT>

	uint8_t payload[ 32 ] ;
	for( uint8_t pos = 0 ; pos < 32 ; ++pos )
 800061e:	2300      	movs	r3, #0
 8000620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000624:	e00c      	b.n	8000640 <MainProc+0x4c>
	{
		payload[ pos ] = pos ;
 8000626:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800062a:	3328      	adds	r3, #40	@ 0x28
 800062c:	443b      	add	r3, r7
 800062e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000632:	f803 2c24 	strb.w	r2, [r3, #-36]
	for( uint8_t pos = 0 ; pos < 32 ; ++pos )
 8000636:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800063a:	3301      	adds	r3, #1
 800063c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000644:	2b1f      	cmp	r3, #31
 8000646:	d9ee      	bls.n	8000626 <MainProc+0x32>
	}

	while( true )
	{
		if( true == oneSecIrq )
 8000648:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <MainProc+0x8c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d1fb      	bne.n	8000648 <MainProc+0x54>
		{
			if( daniel::RfMode::TX == rfMode )
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MainProc+0x84>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d104      	bne.n	8000662 <MainProc+0x6e>
			{
				rf.Transmit( payload ) ;
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MainProc+0x80>)
 800065e:	f000 fd09 	bl	8001074 <_ZN6daniel8nRF24L018TransmitEPh>
			}
			oneSecIrq = false ;
 8000662:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <MainProc+0x8c>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
		if( true == oneSecIrq )
 8000668:	e7ee      	b.n	8000648 <MainProc+0x54>
 800066a:	bf00      	nop
 800066c:	200001ac 	.word	0x200001ac
 8000670:	0800593c 	.word	0x0800593c
 8000674:	200001c0 	.word	0x200001c0
 8000678:	200001f0 	.word	0x200001f0
 800067c:	200000d4 	.word	0x200000d4
 8000680:	200001f1 	.word	0x200001f1

08000684 <UartRX>:
	}
}


void UartRX( UART_HandleTypeDef * pHandle , uint8_t const port )
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
	uint32_t isrflags = READ_REG( pHandle->Instance->SR  ) ;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	617b      	str	r3, [r7, #20]
	uint32_t cr1its   = READ_REG( pHandle->Instance->CR1 ) ;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	613b      	str	r3, [r7, #16]

	if( ( 0U != ( isrflags & USART_SR_RXNE ) ) && ( 0U != ( cr1its & USART_CR1_RXNEIE ) ) )
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	f003 0320 	and.w	r3, r3, #32
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d010      	beq.n	80006cc <UartRX+0x48>
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	f003 0320 	and.w	r3, r3, #32
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00b      	beq.n	80006cc <UartRX+0x48>
	{
		uint32_t rx = pHandle->Instance->DR ;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	60fb      	str	r3, [r7, #12]
		uint8_t dat = ( uint8_t )( rx ) ;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	72fb      	strb	r3, [r7, #11]

		ReceiveUartRx( dat , port ) ;
 80006c0:	78fa      	ldrb	r2, [r7, #3]
 80006c2:	7afb      	ldrb	r3, [r7, #11]
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f804 	bl	80006d4 <ReceiveUartRx>
	}
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <ReceiveUartRx>:


void ReceiveUartRx( uint8_t const dat , uint8_t const port )
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
	if( 1 == port )
	{

	}
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
	...

080006f0 <TimIrq>:


void TimIrq() // is called each 10 milliseconds
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	static uint16_t upCount = 0 ;

	++upCount ;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <TimIrq+0x30>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <TimIrq+0x30>)
 80006fe:	801a      	strh	r2, [r3, #0]
	if( 1000 <= upCount )
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <TimIrq+0x30>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000708:	d305      	bcc.n	8000716 <TimIrq+0x26>
	{
		upCount = 0 ;
 800070a:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <TimIrq+0x30>)
 800070c:	2200      	movs	r2, #0
 800070e:	801a      	strh	r2, [r3, #0]
		oneSecIrq = true ;
 8000710:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <TimIrq+0x34>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
	}
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	200001f2 	.word	0x200001f2
 8000724:	200001f1 	.word	0x200001f1

08000728 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == daniel::nRF24L01::IRQ_Pin )
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d102      	bne.n	800073e <HAL_GPIO_EXTI_Callback+0x16>
	{
		rf.Irq() ;
 8000738:	4803      	ldr	r0, [pc, #12]	@ (8000748 <HAL_GPIO_EXTI_Callback+0x20>)
 800073a:	f000 fde3 	bl	8001304 <_ZN6daniel8nRF24L013IrqEv>
	}
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200001c0 	.word	0x200001c0

0800074c <_Z41__static_initialization_and_destruction_0v>:
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
daniel::USART    uart( & huart1 ) ;
 8000750:	4904      	ldr	r1, [pc, #16]	@ (8000764 <_Z41__static_initialization_and_destruction_0v+0x18>)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 8000754:	f001 f962 	bl	8001a1c <_ZN6daniel5USARTC1EP20__UART_HandleTypeDef>
daniel::nRF24L01 rf( & hspi1 ) ;
 8000758:	4904      	ldr	r1, [pc, #16]	@ (800076c <_Z41__static_initialization_and_destruction_0v+0x20>)
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <_Z41__static_initialization_and_destruction_0v+0x24>)
 800075c:	f000 f82c 	bl	80007b8 <_ZN6daniel8nRF24L01C1EP19__SPI_HandleTypeDef>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000011c 	.word	0x2000011c
 8000768:	200001ac 	.word	0x200001ac
 800076c:	2000007c 	.word	0x2000007c
 8000770:	200001c0 	.word	0x200001c0

08000774 <_ZN6daniel5USARTD1Ev>:


namespace daniel
{

class USART
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3304      	adds	r3, #4
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fe9b 	bl	80014bc <_ZN6daniel10RingBufferIhED1Ev>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <_Z41__static_initialization_and_destruction_1v>:
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
daniel::USART    uart( & huart1 ) ;
 8000794:	4802      	ldr	r0, [pc, #8]	@ (80007a0 <_Z41__static_initialization_and_destruction_1v+0x10>)
 8000796:	f7ff ffed 	bl	8000774 <_ZN6daniel5USARTD1Ev>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200001ac 	.word	0x200001ac

080007a4 <_GLOBAL__sub_I_uart>:
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	f7ff ffd0 	bl	800074c <_Z41__static_initialization_and_destruction_0v>
 80007ac:	bd80      	pop	{r7, pc}

080007ae <_GLOBAL__sub_D_uart>:
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	f7ff ffed 	bl	8000790 <_Z41__static_initialization_and_destruction_1v>
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_ZN6daniel8nRF24L01C1EP19__SPI_HandleTypeDef>:


GPIO_TypeDef * daniel::nRF24L01::IRQ_Port = reinterpret_cast< GPIO_TypeDef * >( GPIOB_BASE ) ;


daniel::nRF24L01::nRF24L01( SPI_HandleTypeDef * _pHandle )
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	: pHandle( _pHandle ) , isCS( false ) , pUart( nullptr ) , payloadSize( 32 ) , rfMode( RfMode::Unknown )
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	711a      	strb	r2, [r3, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2220      	movs	r2, #32
 80007d8:	731a      	strb	r2, [r3, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	22ff      	movs	r2, #255	@ 0xff
 80007de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
{
	SetCS( false ) ;
 80007e2:	2300      	movs	r3, #0
 80007e4:	73fb      	strb	r3, [r7, #15]
 80007e6:	f107 030f 	add.w	r3, r7, #15
 80007ea:	4619      	mov	r1, r3
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f80b 	bl	8000808 <_ZN6daniel8nRF24L015SetCSERKb>
	Log( "nRF24L01: created\r\n" ) ;
 80007f2:	4904      	ldr	r1, [pc, #16]	@ (8000804 <_ZN6daniel8nRF24L01C1EP19__SPI_HandleTypeDef+0x4c>)
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 fd5d 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>
}
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4618      	mov	r0, r3
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08005970 	.word	0x08005970

08000808 <_ZN6daniel8nRF24L015SetCSERKb>:


void daniel::nRF24L01::SetCS( bool const & isEnable )
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
	// CSN signal
	//Log( "nRF24L01: SetCS      - [ %s ]\r\n" , ( true == isEnable ) ? "true " : "false" ) ;
	HAL_GPIO_WritePin( GPIOC , GPIO_PIN_5 , ( true == isEnable ) ? GPIO_PIN_RESET : GPIO_PIN_SET ) ;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b01      	cmp	r3, #1
 8000818:	bf14      	ite	ne
 800081a:	2301      	movne	r3, #1
 800081c:	2300      	moveq	r3, #0
 800081e:	b2db      	uxtb	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	2120      	movs	r1, #32
 8000824:	4803      	ldr	r0, [pc, #12]	@ (8000834 <_ZN6daniel8nRF24L015SetCSERKb+0x2c>)
 8000826:	f001 ffa7 	bl	8002778 <HAL_GPIO_WritePin>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40011000 	.word	0x40011000

08000838 <_ZN6daniel8nRF24L015SetCEERKb>:


void daniel::nRF24L01::SetCE( bool const & isEnable )
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	// CE signal
	Log( "nRF24L01: SetCE      - [ %s ]\r\n" , ( true == isEnable ) ? "true " : "false" ) ;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d101      	bne.n	800084e <_ZN6daniel8nRF24L015SetCEERKb+0x16>
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <_ZN6daniel8nRF24L015SetCEERKb+0x44>)
 800084c:	e000      	b.n	8000850 <_ZN6daniel8nRF24L015SetCEERKb+0x18>
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <_ZN6daniel8nRF24L015SetCEERKb+0x48>)
 8000850:	461a      	mov	r2, r3
 8000852:	490c      	ldr	r1, [pc, #48]	@ (8000884 <_ZN6daniel8nRF24L015SetCEERKb+0x4c>)
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 fd2d 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>
	HAL_GPIO_WritePin( GPIOC , GPIO_PIN_4 , ( true == isEnable ) ? GPIO_PIN_SET : GPIO_PIN_RESET ) ;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d101      	bne.n	8000866 <_ZN6daniel8nRF24L015SetCEERKb+0x2e>
 8000862:	2301      	movs	r3, #1
 8000864:	e000      	b.n	8000868 <_ZN6daniel8nRF24L015SetCEERKb+0x30>
 8000866:	2300      	movs	r3, #0
 8000868:	461a      	mov	r2, r3
 800086a:	2110      	movs	r1, #16
 800086c:	4806      	ldr	r0, [pc, #24]	@ (8000888 <_ZN6daniel8nRF24L015SetCEERKb+0x50>)
 800086e:	f001 ff83 	bl	8002778 <HAL_GPIO_WritePin>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	08005984 	.word	0x08005984
 8000880:	0800598c 	.word	0x0800598c
 8000884:	08005994 	.word	0x08005994
 8000888:	40011000 	.word	0x40011000

0800088c <_ZN6daniel8nRF24L015BeginERKNS_6RfModeE>:


void daniel::nRF24L01::Begin( RfMode const & mode )
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
	Log( "nRF24L01: Begin\r\n" ) ;
 8000896:	490d      	ldr	r1, [pc, #52]	@ (80008cc <_ZN6daniel8nRF24L015BeginERKNS_6RfModeE+0x40>)
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f000 fd0b 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>

	rfMode = mode ;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

	Init() ;
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f000 f811 	bl	80008d0 <_ZN6daniel8nRF24L014InitEv>
	SetRfMode( mode ) ;
 80008ae:	6839      	ldr	r1, [r7, #0]
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 faf1 	bl	8000e98 <_ZN6daniel8nRF24L019SetRfModeERKNS_6RfModeE>
	PowerOnOff( nordic::type::ON ) ;
 80008b6:	2101      	movs	r1, #1
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 faad 	bl	8000e18 <_ZN6daniel8nRF24L0110PowerOnOffEb>
	Inspection() ;
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 f8ea 	bl	8000a98 <_ZN6daniel8nRF24L0110InspectionEv>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	080059b4 	.word	0x080059b4

080008d0 <_ZN6daniel8nRF24L014InitEv>:
	PowerOnOff( nordic::type::OFF ) ;
}


void daniel::nRF24L01::Init()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	Log( "nRF24L01: Init\r\n" ) ;
 80008d8:	495c      	ldr	r1, [pc, #368]	@ (8000a4c <_ZN6daniel8nRF24L014InitEv+0x17c>)
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 fcea 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>
	SetCS( true ) ;
 80008e0:	2301      	movs	r3, #1
 80008e2:	737b      	strb	r3, [r7, #13]
 80008e4:	f107 030d 	add.w	r3, r7, #13
 80008e8:	4619      	mov	r1, r3
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ff8c 	bl	8000808 <_ZN6daniel8nRF24L015SetCSERKb>
	SetCE( true ) ;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73bb      	strb	r3, [r7, #14]
 80008f4:	f107 030e 	add.w	r3, r7, #14
 80008f8:	4619      	mov	r1, r3
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff9c 	bl	8000838 <_ZN6daniel8nRF24L015SetCEERKb>

	namespace TYPE = nordic::type ;
	namespace REG  = nordic::reg  ;

	AccessReg( TYPE::WRITE , REG::CONFIG      , 0x08 ) ; // enable CRC
 8000900:	2308      	movs	r3, #8
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	f107 030f 	add.w	r3, r7, #15
 8000908:	4a51      	ldr	r2, [pc, #324]	@ (8000a50 <_ZN6daniel8nRF24L014InitEv+0x180>)
 800090a:	4952      	ldr	r1, [pc, #328]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f000 fbc1 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::EN_AA       , 0x3F ) ; // enable AUTOACK for all data pipe
 8000912:	233f      	movs	r3, #63	@ 0x3f
 8000914:	743b      	strb	r3, [r7, #16]
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4a4f      	ldr	r2, [pc, #316]	@ (8000a58 <_ZN6daniel8nRF24L014InitEv+0x188>)
 800091c:	494d      	ldr	r1, [pc, #308]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f000 fbb8 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::EN_RXADDR   , 0x3F ) ; // enable RX address for all data pipe
 8000924:	233f      	movs	r3, #63	@ 0x3f
 8000926:	747b      	strb	r3, [r7, #17]
 8000928:	f107 0311 	add.w	r3, r7, #17
 800092c:	4a4b      	ldr	r2, [pc, #300]	@ (8000a5c <_ZN6daniel8nRF24L014InitEv+0x18c>)
 800092e:	4949      	ldr	r1, [pc, #292]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 fbaf 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::SETUP_AW    , 0x03 ) ; // address field width( 5 )
 8000936:	2303      	movs	r3, #3
 8000938:	74bb      	strb	r3, [r7, #18]
 800093a:	f107 0312 	add.w	r3, r7, #18
 800093e:	4a48      	ldr	r2, [pc, #288]	@ (8000a60 <_ZN6daniel8nRF24L014InitEv+0x190>)
 8000940:	4944      	ldr	r1, [pc, #272]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 fba6 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::SETUP_RETR  , 0x03 ) ; // auto retransmit delay( 250us ) , retransmit count( 3 )
 8000948:	2303      	movs	r3, #3
 800094a:	74fb      	strb	r3, [r7, #19]
 800094c:	f107 0313 	add.w	r3, r7, #19
 8000950:	4a44      	ldr	r2, [pc, #272]	@ (8000a64 <_ZN6daniel8nRF24L014InitEv+0x194>)
 8000952:	4940      	ldr	r1, [pc, #256]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 fb9d 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::RF_CH       , 0x00 ) ; // RF channel ( 0 )
 800095a:	2300      	movs	r3, #0
 800095c:	753b      	strb	r3, [r7, #20]
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4a41      	ldr	r2, [pc, #260]	@ (8000a68 <_ZN6daniel8nRF24L014InitEv+0x198>)
 8000964:	493b      	ldr	r1, [pc, #236]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 fb94 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::RF_SETUP    , 0x0E ) ; // data rates ( 2Mbps ) , RF output power( 0 dBm )
 800096c:	230e      	movs	r3, #14
 800096e:	757b      	strb	r3, [r7, #21]
 8000970:	f107 0315 	add.w	r3, r7, #21
 8000974:	4a3d      	ldr	r2, [pc, #244]	@ (8000a6c <_ZN6daniel8nRF24L014InitEv+0x19c>)
 8000976:	4937      	ldr	r1, [pc, #220]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 fb8b 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::RF_STATUS   , 0x7F ) ; // interrupt enabled for Rx and TX , RX FIFO empty, TX FIFO ready
 800097e:	237f      	movs	r3, #127	@ 0x7f
 8000980:	75bb      	strb	r3, [r7, #22]
 8000982:	f107 0316 	add.w	r3, r7, #22
 8000986:	4a3a      	ldr	r2, [pc, #232]	@ (8000a70 <_ZN6daniel8nRF24L014InitEv+0x1a0>)
 8000988:	4932      	ldr	r1, [pc, #200]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f000 fb82 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::RX_PW_P0    , payloadSize ) ; // payload size
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	330c      	adds	r3, #12
 8000994:	4a37      	ldr	r2, [pc, #220]	@ (8000a74 <_ZN6daniel8nRF24L014InitEv+0x1a4>)
 8000996:	492f      	ldr	r1, [pc, #188]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f000 fb7b 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::RX_PW_P1    , 0x00 ) ;
 800099e:	2300      	movs	r3, #0
 80009a0:	75fb      	strb	r3, [r7, #23]
 80009a2:	f107 0317 	add.w	r3, r7, #23
 80009a6:	4a34      	ldr	r2, [pc, #208]	@ (8000a78 <_ZN6daniel8nRF24L014InitEv+0x1a8>)
 80009a8:	492a      	ldr	r1, [pc, #168]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 fb72 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::RX_PW_P2    , 0x00 ) ;
 80009b0:	2300      	movs	r3, #0
 80009b2:	763b      	strb	r3, [r7, #24]
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	4a30      	ldr	r2, [pc, #192]	@ (8000a7c <_ZN6daniel8nRF24L014InitEv+0x1ac>)
 80009ba:	4926      	ldr	r1, [pc, #152]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 fb69 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::RX_PW_P3    , 0x00 ) ;
 80009c2:	2300      	movs	r3, #0
 80009c4:	767b      	strb	r3, [r7, #25]
 80009c6:	f107 0319 	add.w	r3, r7, #25
 80009ca:	4a2d      	ldr	r2, [pc, #180]	@ (8000a80 <_ZN6daniel8nRF24L014InitEv+0x1b0>)
 80009cc:	4921      	ldr	r1, [pc, #132]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f000 fb60 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::RX_PW_P4    , 0x00 ) ;
 80009d4:	2300      	movs	r3, #0
 80009d6:	76bb      	strb	r3, [r7, #26]
 80009d8:	f107 031a 	add.w	r3, r7, #26
 80009dc:	4a29      	ldr	r2, [pc, #164]	@ (8000a84 <_ZN6daniel8nRF24L014InitEv+0x1b4>)
 80009de:	491d      	ldr	r1, [pc, #116]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 fb57 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::RX_PW_P5    , 0x00 ) ;
 80009e6:	2300      	movs	r3, #0
 80009e8:	76fb      	strb	r3, [r7, #27]
 80009ea:	f107 031b 	add.w	r3, r7, #27
 80009ee:	4a26      	ldr	r2, [pc, #152]	@ (8000a88 <_ZN6daniel8nRF24L014InitEv+0x1b8>)
 80009f0:	4918      	ldr	r1, [pc, #96]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f000 fb4e 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::FIFO_STATUS , 0x11 ) ; // RX and TX FIFO( empty )
 80009f8:	2311      	movs	r3, #17
 80009fa:	773b      	strb	r3, [r7, #28]
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4a22      	ldr	r2, [pc, #136]	@ (8000a8c <_ZN6daniel8nRF24L014InitEv+0x1bc>)
 8000a02:	4914      	ldr	r1, [pc, #80]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f000 fb45 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::DYNPD       , 0x00 ) ; // No Dynamic payload length
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	777b      	strb	r3, [r7, #29]
 8000a0e:	f107 031d 	add.w	r3, r7, #29
 8000a12:	4a1f      	ldr	r2, [pc, #124]	@ (8000a90 <_ZN6daniel8nRF24L014InitEv+0x1c0>)
 8000a14:	490f      	ldr	r1, [pc, #60]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f000 fb3c 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
	AccessReg( TYPE::WRITE , REG::FEATURE     , 0x00 ) ; // Others
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	77bb      	strb	r3, [r7, #30]
 8000a20:	f107 031e 	add.w	r3, r7, #30
 8000a24:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <_ZN6daniel8nRF24L014InitEv+0x1c4>)
 8000a26:	490b      	ldr	r1, [pc, #44]	@ (8000a54 <_ZN6daniel8nRF24L014InitEv+0x184>)
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 fb33 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>

	FlushFIFO() ;
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 fbd4 	bl	80011dc <_ZNK6daniel8nRF24L019FlushFIFOEv>

	SetCE( false ) ;
 8000a34:	2300      	movs	r3, #0
 8000a36:	77fb      	strb	r3, [r7, #31]
 8000a38:	f107 031f 	add.w	r3, r7, #31
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff fefa 	bl	8000838 <_ZN6daniel8nRF24L015SetCEERKb>
}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	080059d8 	.word	0x080059d8
 8000a50:	08005c28 	.word	0x08005c28
 8000a54:	08005c3a 	.word	0x08005c3a
 8000a58:	08005c29 	.word	0x08005c29
 8000a5c:	08005c2a 	.word	0x08005c2a
 8000a60:	08005c2b 	.word	0x08005c2b
 8000a64:	08005c2c 	.word	0x08005c2c
 8000a68:	08005c2d 	.word	0x08005c2d
 8000a6c:	08005c2e 	.word	0x08005c2e
 8000a70:	08005c2f 	.word	0x08005c2f
 8000a74:	08005c30 	.word	0x08005c30
 8000a78:	08005c31 	.word	0x08005c31
 8000a7c:	08005c32 	.word	0x08005c32
 8000a80:	08005c33 	.word	0x08005c33
 8000a84:	08005c34 	.word	0x08005c34
 8000a88:	08005c35 	.word	0x08005c35
 8000a8c:	08005c36 	.word	0x08005c36
 8000a90:	08005c37 	.word	0x08005c37
 8000a94:	08005c38 	.word	0x08005c38

08000a98 <_ZN6daniel8nRF24L0110InspectionEv>:

void daniel::nRF24L01::Inspection()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	@ 0x30
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	namespace TYPE = nordic::type ;
	namespace REG  = nordic::reg  ;

	uint8_t value[ 17 ] ;
	uint8_t valuePos = 0 ;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	void Init() ;
	void SetCS( bool const & isEnable = true  ) ;
	void SetCE( bool const & isEnable = false ) ;

private :
	uint8_t AccessReg( uint8_t const & accessType , uint8_t const & reg , uint8_t const & val = 0x00 ) ;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	777b      	strb	r3, [r7, #29]

	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::CONFIG      ) ; // enable CRC
 8000aaa:	f107 031d 	add.w	r3, r7, #29
 8000aae:	4ac7      	ldr	r2, [pc, #796]	@ (8000dcc <_ZN6daniel8nRF24L0110InspectionEv+0x334>)
 8000ab0:	49c7      	ldr	r1, [pc, #796]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 faee 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4619      	mov	r1, r3
 8000abc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000ac6:	3330      	adds	r3, #48	@ 0x30
 8000ac8:	443b      	add	r3, r7
 8000aca:	460a      	mov	r2, r1
 8000acc:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	77bb      	strb	r3, [r7, #30]
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::EN_AA       ) ; // enable AUTOACK for all data pipe
 8000ad4:	f107 031e 	add.w	r3, r7, #30
 8000ad8:	4abe      	ldr	r2, [pc, #760]	@ (8000dd4 <_ZN6daniel8nRF24L0110InspectionEv+0x33c>)
 8000ada:	49bd      	ldr	r1, [pc, #756]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 fad9 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000af0:	3330      	adds	r3, #48	@ 0x30
 8000af2:	443b      	add	r3, r7
 8000af4:	460a      	mov	r2, r1
 8000af6:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000afa:	2300      	movs	r3, #0
 8000afc:	77fb      	strb	r3, [r7, #31]
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::EN_RXADDR   ) ; // enable RX address for all data pipe
 8000afe:	f107 031f 	add.w	r3, r7, #31
 8000b02:	4ab5      	ldr	r2, [pc, #724]	@ (8000dd8 <_ZN6daniel8nRF24L0110InspectionEv+0x340>)
 8000b04:	49b2      	ldr	r1, [pc, #712]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 fac4 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000b1a:	3330      	adds	r3, #48	@ 0x30
 8000b1c:	443b      	add	r3, r7
 8000b1e:	460a      	mov	r2, r1
 8000b20:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000b24:	2300      	movs	r3, #0
 8000b26:	f887 3020 	strb.w	r3, [r7, #32]
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::SETUP_AW    ) ; // address field width( 5 )
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	4aab      	ldr	r2, [pc, #684]	@ (8000ddc <_ZN6daniel8nRF24L0110InspectionEv+0x344>)
 8000b30:	49a7      	ldr	r1, [pc, #668]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f000 faae 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000b46:	3330      	adds	r3, #48	@ 0x30
 8000b48:	443b      	add	r3, r7
 8000b4a:	460a      	mov	r2, r1
 8000b4c:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::SETUP_RETR  ) ; // auto retransmit delay( 250us ) , retransmit count( 3 )
 8000b56:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8000b5a:	4aa1      	ldr	r2, [pc, #644]	@ (8000de0 <_ZN6daniel8nRF24L0110InspectionEv+0x348>)
 8000b5c:	499c      	ldr	r1, [pc, #624]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 fa98 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4619      	mov	r1, r3
 8000b68:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b6c:	1c5a      	adds	r2, r3, #1
 8000b6e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000b72:	3330      	adds	r3, #48	@ 0x30
 8000b74:	443b      	add	r3, r7
 8000b76:	460a      	mov	r2, r1
 8000b78:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::RF_CH       ) ; // RF channel ( 0 )
 8000b82:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 8000b86:	4a97      	ldr	r2, [pc, #604]	@ (8000de4 <_ZN6daniel8nRF24L0110InspectionEv+0x34c>)
 8000b88:	4991      	ldr	r1, [pc, #580]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fa82 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4619      	mov	r1, r3
 8000b94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000b9e:	3330      	adds	r3, #48	@ 0x30
 8000ba0:	443b      	add	r3, r7
 8000ba2:	460a      	mov	r2, r1
 8000ba4:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::RF_SETUP    ) ; // data rates ( 2Mbps ) , RF output power( 0 dBm )
 8000bae:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8000bb2:	4a8d      	ldr	r2, [pc, #564]	@ (8000de8 <_ZN6daniel8nRF24L0110InspectionEv+0x350>)
 8000bb4:	4986      	ldr	r1, [pc, #536]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 fa6c 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bc4:	1c5a      	adds	r2, r3, #1
 8000bc6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000bca:	3330      	adds	r3, #48	@ 0x30
 8000bcc:	443b      	add	r3, r7
 8000bce:	460a      	mov	r2, r1
 8000bd0:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::RF_STATUS   ) ; // interrupt enabled for Rx and TX , RX FIFO empty, TX FIFO ready
 8000bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bde:	4a83      	ldr	r2, [pc, #524]	@ (8000dec <_ZN6daniel8nRF24L0110InspectionEv+0x354>)
 8000be0:	497b      	ldr	r1, [pc, #492]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 fa56 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000be8:	4603      	mov	r3, r0
 8000bea:	4619      	mov	r1, r3
 8000bec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000bf6:	3330      	adds	r3, #48	@ 0x30
 8000bf8:	443b      	add	r3, r7
 8000bfa:	460a      	mov	r2, r1
 8000bfc:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000c00:	2300      	movs	r3, #0
 8000c02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::RX_PW_P0    ) ; // data pipe 0 not used in RX
 8000c06:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 8000c0a:	4a79      	ldr	r2, [pc, #484]	@ (8000df0 <_ZN6daniel8nRF24L0110InspectionEv+0x358>)
 8000c0c:	4970      	ldr	r1, [pc, #448]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 fa40 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4619      	mov	r1, r3
 8000c18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000c22:	3330      	adds	r3, #48	@ 0x30
 8000c24:	443b      	add	r3, r7
 8000c26:	460a      	mov	r2, r1
 8000c28:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::RX_PW_P1    ) ; // data pipe 1 not used in RX
 8000c32:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8000c36:	4a6f      	ldr	r2, [pc, #444]	@ (8000df4 <_ZN6daniel8nRF24L0110InspectionEv+0x35c>)
 8000c38:	4965      	ldr	r1, [pc, #404]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 fa2a 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4619      	mov	r1, r3
 8000c44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000c4e:	3330      	adds	r3, #48	@ 0x30
 8000c50:	443b      	add	r3, r7
 8000c52:	460a      	mov	r2, r1
 8000c54:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::RX_PW_P2    ) ; // data pipe 2 not used in RX
 8000c5e:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8000c62:	4a65      	ldr	r2, [pc, #404]	@ (8000df8 <_ZN6daniel8nRF24L0110InspectionEv+0x360>)
 8000c64:	495a      	ldr	r1, [pc, #360]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 fa14 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000c7a:	3330      	adds	r3, #48	@ 0x30
 8000c7c:	443b      	add	r3, r7
 8000c7e:	460a      	mov	r2, r1
 8000c80:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::RX_PW_P3    ) ; // data pipe 3 not used in RX
 8000c8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c8e:	4a5b      	ldr	r2, [pc, #364]	@ (8000dfc <_ZN6daniel8nRF24L0110InspectionEv+0x364>)
 8000c90:	494f      	ldr	r1, [pc, #316]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f9fe 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000ca6:	3330      	adds	r3, #48	@ 0x30
 8000ca8:	443b      	add	r3, r7
 8000caa:	460a      	mov	r2, r1
 8000cac:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::RX_PW_P4    ) ; // data pipe 4 not used in RX
 8000cb6:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8000cba:	4a51      	ldr	r2, [pc, #324]	@ (8000e00 <_ZN6daniel8nRF24L0110InspectionEv+0x368>)
 8000cbc:	4944      	ldr	r1, [pc, #272]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f9e8 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000cd2:	3330      	adds	r3, #48	@ 0x30
 8000cd4:	443b      	add	r3, r7
 8000cd6:	460a      	mov	r2, r1
 8000cd8:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::RX_PW_P5    ) ; // data pipe 5 not used in RX
 8000ce2:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8000ce6:	4a47      	ldr	r2, [pc, #284]	@ (8000e04 <_ZN6daniel8nRF24L0110InspectionEv+0x36c>)
 8000ce8:	4939      	ldr	r1, [pc, #228]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 f9d2 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000cfe:	3330      	adds	r3, #48	@ 0x30
 8000d00:	443b      	add	r3, r7
 8000d02:	460a      	mov	r2, r1
 8000d04:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::FIFO_STATUS ) ; // RX and TX FIFO( empty )
 8000d0e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8000d12:	4a3d      	ldr	r2, [pc, #244]	@ (8000e08 <_ZN6daniel8nRF24L0110InspectionEv+0x370>)
 8000d14:	492e      	ldr	r1, [pc, #184]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f9bc 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000d2a:	3330      	adds	r3, #48	@ 0x30
 8000d2c:	443b      	add	r3, r7
 8000d2e:	460a      	mov	r2, r1
 8000d30:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000d34:	2300      	movs	r3, #0
 8000d36:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::DYNPD       ) ; // No Dynamic payload length
 8000d3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d3e:	4a33      	ldr	r2, [pc, #204]	@ (8000e0c <_ZN6daniel8nRF24L0110InspectionEv+0x374>)
 8000d40:	4923      	ldr	r1, [pc, #140]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 f9a6 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000d56:	3330      	adds	r3, #48	@ 0x30
 8000d58:	443b      	add	r3, r7
 8000d5a:	460a      	mov	r2, r1
 8000d5c:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	value[ valuePos++ ] = AccessReg( TYPE::READ , REG::FEATURE     ) ; // Others
 8000d66:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000d6a:	4a29      	ldr	r2, [pc, #164]	@ (8000e10 <_ZN6daniel8nRF24L0110InspectionEv+0x378>)
 8000d6c:	4918      	ldr	r1, [pc, #96]	@ (8000dd0 <_ZN6daniel8nRF24L0110InspectionEv+0x338>)
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f990 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4619      	mov	r1, r3
 8000d78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8000d82:	3330      	adds	r3, #48	@ 0x30
 8000d84:	443b      	add	r3, r7
 8000d86:	460a      	mov	r2, r1
 8000d88:	f803 2c24 	strb.w	r2, [r3, #-36]

	for( uint8_t pos = 0 ; pos < valuePos ; ++pos )
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d92:	e00f      	b.n	8000db4 <_ZN6daniel8nRF24L0110InspectionEv+0x31c>
	{
		Log( "nRF24L01: Insp - 0x%02X\r\n" , value[ pos ] ) ;
 8000d94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d98:	3330      	adds	r3, #48	@ 0x30
 8000d9a:	443b      	add	r3, r7
 8000d9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000da0:	461a      	mov	r2, r3
 8000da2:	491c      	ldr	r1, [pc, #112]	@ (8000e14 <_ZN6daniel8nRF24L0110InspectionEv+0x37c>)
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 fa85 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>
	for( uint8_t pos = 0 ; pos < valuePos ; ++pos )
 8000daa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dae:	3301      	adds	r3, #1
 8000db0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000db4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000db8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d3e9      	bcc.n	8000d94 <_ZN6daniel8nRF24L0110InspectionEv+0x2fc>
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3730      	adds	r7, #48	@ 0x30
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	08005c28 	.word	0x08005c28
 8000dd0:	08005c39 	.word	0x08005c39
 8000dd4:	08005c29 	.word	0x08005c29
 8000dd8:	08005c2a 	.word	0x08005c2a
 8000ddc:	08005c2b 	.word	0x08005c2b
 8000de0:	08005c2c 	.word	0x08005c2c
 8000de4:	08005c2d 	.word	0x08005c2d
 8000de8:	08005c2e 	.word	0x08005c2e
 8000dec:	08005c2f 	.word	0x08005c2f
 8000df0:	08005c30 	.word	0x08005c30
 8000df4:	08005c31 	.word	0x08005c31
 8000df8:	08005c32 	.word	0x08005c32
 8000dfc:	08005c33 	.word	0x08005c33
 8000e00:	08005c34 	.word	0x08005c34
 8000e04:	08005c35 	.word	0x08005c35
 8000e08:	08005c36 	.word	0x08005c36
 8000e0c:	08005c37 	.word	0x08005c37
 8000e10:	08005c38 	.word	0x08005c38
 8000e14:	080059ec 	.word	0x080059ec

08000e18 <_ZN6daniel8nRF24L0110PowerOnOffEb>:


void daniel::nRF24L01::PowerOnOff( bool isOn )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
	Log( "nRF24L01: PowerOnOff - [ %s ]\r\n" , ( true == isOn ) ? "true " : "false" ) ;
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d101      	bne.n	8000e2e <_ZN6daniel8nRF24L0110PowerOnOffEb+0x16>
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <_ZN6daniel8nRF24L0110PowerOnOffEb+0x68>)
 8000e2c:	e000      	b.n	8000e30 <_ZN6daniel8nRF24L0110PowerOnOffEb+0x18>
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <_ZN6daniel8nRF24L0110PowerOnOffEb+0x6c>)
 8000e30:	461a      	mov	r2, r3
 8000e32:	4915      	ldr	r1, [pc, #84]	@ (8000e88 <_ZN6daniel8nRF24L0110PowerOnOffEb+0x70>)
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 fa3d 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
	namespace TYPE = nordic::type ;
	namespace REG  = nordic::reg  ;

	uint8_t conf = AccessReg( TYPE::READ , REG::CONFIG ) ;
 8000e3e:	f107 030f 	add.w	r3, r7, #15
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <_ZN6daniel8nRF24L0110PowerOnOffEb+0x74>)
 8000e44:	4912      	ldr	r1, [pc, #72]	@ (8000e90 <_ZN6daniel8nRF24L0110PowerOnOffEb+0x78>)
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 f924 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73bb      	strb	r3, [r7, #14]

	conf = ( true == isOn ) ? ( conf | 0x02 ) : ( conf & 0xFD ) ;
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d104      	bne.n	8000e60 <_ZN6daniel8nRF24L0110PowerOnOffEb+0x48>
 8000e56:	7bbb      	ldrb	r3, [r7, #14]
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	e003      	b.n	8000e68 <_ZN6daniel8nRF24L0110PowerOnOffEb+0x50>
 8000e60:	7bbb      	ldrb	r3, [r7, #14]
 8000e62:	f023 0302 	bic.w	r3, r3, #2
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	73bb      	strb	r3, [r7, #14]

	AccessReg( TYPE::WRITE , REG::CONFIG , conf ) ;
 8000e6a:	f107 030e 	add.w	r3, r7, #14
 8000e6e:	4a07      	ldr	r2, [pc, #28]	@ (8000e8c <_ZN6daniel8nRF24L0110PowerOnOffEb+0x74>)
 8000e70:	4908      	ldr	r1, [pc, #32]	@ (8000e94 <_ZN6daniel8nRF24L0110PowerOnOffEb+0x7c>)
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f90e 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	08005984 	.word	0x08005984
 8000e84:	0800598c 	.word	0x0800598c
 8000e88:	08005a08 	.word	0x08005a08
 8000e8c:	08005c28 	.word	0x08005c28
 8000e90:	08005c39 	.word	0x08005c39
 8000e94:	08005c3a 	.word	0x08005c3a

08000e98 <_ZN6daniel8nRF24L019SetRfModeERKNS_6RfModeE>:


void daniel::nRF24L01::SetRfMode( RfMode const & mode )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73bb      	strb	r3, [r7, #14]
	namespace TYPE = nordic::type ;
	namespace REG  = nordic::reg  ;

	uint8_t val = AccessReg( TYPE::READ  , REG::CONFIG ) ;
 8000ea6:	f107 030e 	add.w	r3, r7, #14
 8000eaa:	4a10      	ldr	r2, [pc, #64]	@ (8000eec <_ZN6daniel8nRF24L019SetRfModeERKNS_6RfModeE+0x54>)
 8000eac:	4910      	ldr	r1, [pc, #64]	@ (8000ef0 <_ZN6daniel8nRF24L019SetRfModeERKNS_6RfModeE+0x58>)
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f8f0 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]

	uint8_t confVal = ( RfMode::RX == mode ) ? ( val | 0x01 ) : ( val & 0xFE ) ;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d104      	bne.n	8000eca <_ZN6daniel8nRF24L019SetRfModeERKNS_6RfModeE+0x32>
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	e003      	b.n	8000ed2 <_ZN6daniel8nRF24L019SetRfModeERKNS_6RfModeE+0x3a>
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	737b      	strb	r3, [r7, #13]

	AccessReg( TYPE::WRITE , REG::CONFIG , confVal ) ;
 8000ed4:	f107 030d 	add.w	r3, r7, #13
 8000ed8:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <_ZN6daniel8nRF24L019SetRfModeERKNS_6RfModeE+0x54>)
 8000eda:	4906      	ldr	r1, [pc, #24]	@ (8000ef4 <_ZN6daniel8nRF24L019SetRfModeERKNS_6RfModeE+0x5c>)
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 f8d9 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	08005c28 	.word	0x08005c28
 8000ef0:	08005c39 	.word	0x08005c39
 8000ef4:	08005c3a 	.word	0x08005c3a

08000ef8 <_ZN6daniel8nRF24L0112PushToTxFifoEPh>:


uint8_t daniel::nRF24L01::PushToTxFifo( uint8_t * payload )
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	namespace CMD = nordic::cmd ;

	uint8_t cmd = CMD::W_TX_PAYLOAD ;
 8000f02:	23a0      	movs	r3, #160	@ 0xa0
 8000f04:	733b      	strb	r3, [r7, #12]
	uint8_t ret = 0x00 ;
 8000f06:	2300      	movs	r3, #0
 8000f08:	72fb      	strb	r3, [r7, #11]

	SetCS( true ) ;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	737b      	strb	r3, [r7, #13]
 8000f0e:	f107 030d 	add.w	r3, r7, #13
 8000f12:	4619      	mov	r1, r3
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff fc77 	bl	8000808 <_ZN6daniel8nRF24L015SetCSERKb>

	HAL_StatusTypeDef spiRes = HAL_SPI_TransmitReceive( pHandle , & cmd , & ret , 1 , spiTimeOut ) ;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	f107 020b 	add.w	r2, r7, #11
 8000f22:	f107 010c 	add.w	r1, r7, #12
 8000f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f002 fb8e 	bl	800364e <HAL_SPI_TransmitReceive>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73fb      	strb	r3, [r7, #15]
	if( HAL_OK != spiRes )
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d008      	beq.n	8000f4e <_ZN6daniel8nRF24L0112PushToTxFifoEPh+0x56>
	{
		Log( "nRF24L01: AccessReg  - [ %s ] - error - HAL_SPI_TransmitReceive()\r\n" , errType[ spiRes ] ) ;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <_ZN6daniel8nRF24L0112PushToTxFifoEPh+0x88>)
 8000f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f44:	461a      	mov	r2, r3
 8000f46:	490f      	ldr	r1, [pc, #60]	@ (8000f84 <_ZN6daniel8nRF24L0112PushToTxFifoEPh+0x8c>)
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f9b3 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>
	}

	spiRes = HAL_SPI_Transmit( pHandle , payload , payloadSize , spiTimeOut ) ;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7b1b      	ldrb	r3, [r3, #12]
 8000f56:	461a      	mov	r2, r3
 8000f58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	f002 f919 	bl	8003194 <HAL_SPI_Transmit>
 8000f62:	4603      	mov	r3, r0
 8000f64:	73fb      	strb	r3, [r7, #15]

	SetCS( false ) ;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73bb      	strb	r3, [r7, #14]
 8000f6a:	f107 030e 	add.w	r3, r7, #14
 8000f6e:	4619      	mov	r1, r3
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff fc49 	bl	8000808 <_ZN6daniel8nRF24L015SetCSERKb>

	return ret ;
 8000f76:	7afb      	ldrb	r3, [r7, #11]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08005c18 	.word	0x08005c18
 8000f84:	08005a28 	.word	0x08005a28

08000f88 <_ZN6daniel8nRF24L0113PopFromRxFifoEPh>:


uint8_t daniel::nRF24L01::PopFromRxFifo( uint8_t * payload )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	namespace CMD = nordic::cmd ;

	uint8_t cmd = CMD::R_RX_PAYLOAD ;
 8000f92:	2361      	movs	r3, #97	@ 0x61
 8000f94:	733b      	strb	r3, [r7, #12]
	uint8_t ret = 0x00 ;
 8000f96:	2300      	movs	r3, #0
 8000f98:	72fb      	strb	r3, [r7, #11]

	SetCS( true ) ;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	737b      	strb	r3, [r7, #13]
 8000f9e:	f107 030d 	add.w	r3, r7, #13
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff fc2f 	bl	8000808 <_ZN6daniel8nRF24L015SetCSERKb>

	HAL_StatusTypeDef spiRes = HAL_SPI_TransmitReceive( pHandle , & cmd , & ret , 1 , spiTimeOut ) ;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	f107 020b 	add.w	r2, r7, #11
 8000fb2:	f107 010c 	add.w	r1, r7, #12
 8000fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	f002 fb46 	bl	800364e <HAL_SPI_TransmitReceive>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
	if( HAL_OK != spiRes )
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d008      	beq.n	8000fde <_ZN6daniel8nRF24L0113PopFromRxFifoEPh+0x56>
	{
		Log( "nRF24L01: AccessReg  - [ %s ] - error - HAL_SPI_TransmitReceive()\r\n" , errType[ spiRes ] ) ;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4a10      	ldr	r2, [pc, #64]	@ (8001010 <_ZN6daniel8nRF24L0113PopFromRxFifoEPh+0x88>)
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	490f      	ldr	r1, [pc, #60]	@ (8001014 <_ZN6daniel8nRF24L0113PopFromRxFifoEPh+0x8c>)
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f96b 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>
	}

	spiRes = HAL_SPI_Receive( pHandle , payload , payloadSize , spiTimeOut ) ;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7b1b      	ldrb	r3, [r3, #12]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fec:	6839      	ldr	r1, [r7, #0]
 8000fee:	f002 fa15 	bl	800341c <HAL_SPI_Receive>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73fb      	strb	r3, [r7, #15]

	SetCS( false ) ;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]
 8000ffa:	f107 030e 	add.w	r3, r7, #14
 8000ffe:	4619      	mov	r1, r3
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff fc01 	bl	8000808 <_ZN6daniel8nRF24L015SetCSERKb>

	return ret ;
 8001006:	7afb      	ldrb	r3, [r7, #11]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	08005c18 	.word	0x08005c18
 8001014:	08005a28 	.word	0x08005a28

08001018 <_ZN6daniel8nRF24L017ReceiveEPh>:


void daniel::nRF24L01::Receive ( uint8_t * payload )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	uint8_t res = PopFromRxFifo( payload ) ;
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ffaf 	bl	8000f88 <_ZN6daniel8nRF24L0113PopFromRxFifoEPh>
 800102a:	4603      	mov	r3, r0
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	2300      	movs	r3, #0
 8001030:	737b      	strb	r3, [r7, #13]
	}

	namespace TYPE = nordic::type ;
	namespace REG  = nordic::reg  ;

	uint8_t val = AccessReg( TYPE::READ , REG::RF_STATUS ) ;
 8001032:	f107 030d 	add.w	r3, r7, #13
 8001036:	4a0c      	ldr	r2, [pc, #48]	@ (8001068 <_ZN6daniel8nRF24L017ReceiveEPh+0x50>)
 8001038:	490c      	ldr	r1, [pc, #48]	@ (800106c <_ZN6daniel8nRF24L017ReceiveEPh+0x54>)
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f82a 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8001040:	4603      	mov	r3, r0
 8001042:	73bb      	strb	r3, [r7, #14]
	uint8_t confVal = val | 0x40 ;
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800104a:	b2db      	uxtb	r3, r3
 800104c:	733b      	strb	r3, [r7, #12]

	val = AccessReg( TYPE::WRITE , REG::RF_STATUS , confVal ) ;
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <_ZN6daniel8nRF24L017ReceiveEPh+0x50>)
 8001054:	4906      	ldr	r1, [pc, #24]	@ (8001070 <_ZN6daniel8nRF24L017ReceiveEPh+0x58>)
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f81c 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 800105c:	4603      	mov	r3, r0
 800105e:	73bb      	strb	r3, [r7, #14]
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	08005c2f 	.word	0x08005c2f
 800106c:	08005c39 	.word	0x08005c39
 8001070:	08005c3a 	.word	0x08005c3a

08001074 <_ZN6daniel8nRF24L018TransmitEPh>:


void daniel::nRF24L01::Transmit( uint8_t * payload )
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
	uint8_t res = PushToTxFifo( payload ) ;
 800107e:	6839      	ldr	r1, [r7, #0]
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff39 	bl	8000ef8 <_ZN6daniel8nRF24L0112PushToTxFifoEPh>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
	if( 0 != res )
	{

	}

}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>:


uint8_t daniel::nRF24L01::AccessReg( uint8_t const & accessType , uint8_t const & reg , uint8_t const & val )
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af02      	add	r7, sp, #8
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	603b      	str	r3, [r7, #0]
	namespace TYPE = nordic::type ;
	namespace CMD  = nordic::cmd  ;

	Log( "nRF24L01: AccessReg  - type [ %s ] - reg [ 0x%02X ] - val[ 0x%02X ]\r\n" , ( TYPE::READ == accessType ) ? "read " : "write" , reg , val ) ;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x1a>
 80010aa:	4a45      	ldr	r2, [pc, #276]	@ (80011c0 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x12c>)
 80010ac:	e000      	b.n	80010b0 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x1c>
 80010ae:	4a45      	ldr	r2, [pc, #276]	@ (80011c4 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x130>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	460b      	mov	r3, r1
 80010be:	4942      	ldr	r1, [pc, #264]	@ (80011c8 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x134>)
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f000 f8f7 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>

	uint8_t cmd = ( ( TYPE::READ == accessType ) ? CMD::R_REGISTER : CMD::W_REGISTER ) | reg ;
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x3e>
 80010ce:	2200      	movs	r2, #0
 80010d0:	e000      	b.n	80010d4 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x40>
 80010d2:	2220      	movs	r2, #32
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4313      	orrs	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	753b      	strb	r3, [r7, #20]
	uint8_t ret = 0x00 ;
 80010de:	2300      	movs	r3, #0
 80010e0:	74fb      	strb	r3, [r7, #19]

	SetCS( true ) ;
 80010e2:	2301      	movs	r3, #1
 80010e4:	757b      	strb	r3, [r7, #21]
 80010e6:	f107 0315 	add.w	r3, r7, #21
 80010ea:	4619      	mov	r1, r3
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f7ff fb8b 	bl	8000808 <_ZN6daniel8nRF24L015SetCSERKb>

	HAL_StatusTypeDef spiRes = HAL_SPI_TransmitReceive( pHandle , & cmd , & ret , 1 , spiTimeOut ) ;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	f107 0213 	add.w	r2, r7, #19
 80010fa:	f107 0114 	add.w	r1, r7, #20
 80010fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	f002 faa2 	bl	800364e <HAL_SPI_TransmitReceive>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
	if( HAL_OK != spiRes )
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x92>
	{
		Log( "nRF24L01: AccessReg  - [ %s ] - error - HAL_SPI_TransmitReceive()\r\n" , errType[ spiRes ] ) ;
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	4a2d      	ldr	r2, [pc, #180]	@ (80011cc <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x138>)
 8001118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111c:	461a      	mov	r2, r3
 800111e:	492c      	ldr	r1, [pc, #176]	@ (80011d0 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x13c>)
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 f8c7 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>
	}

	uint8_t res = val ;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	74bb      	strb	r3, [r7, #18]
	if( TYPE::READ == accessType )
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10b      	bne.n	800114c <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0xb8>
	{
		spiRes = HAL_SPI_Receive( pHandle , & res , 1 , spiTimeOut ) ;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	f107 0112 	add.w	r1, r7, #18
 800113c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001140:	2201      	movs	r2, #1
 8001142:	f002 f96b 	bl	800341c <HAL_SPI_Receive>
 8001146:	4603      	mov	r3, r0
 8001148:	75fb      	strb	r3, [r7, #23]
 800114a:	e00a      	b.n	8001162 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0xce>
	}
	else
	{
		spiRes = HAL_SPI_Transmit( pHandle , & res , 1 , spiTimeOut ) ;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	f107 0112 	add.w	r1, r7, #18
 8001154:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001158:	2201      	movs	r2, #1
 800115a:	f002 f81b 	bl	8003194 <HAL_SPI_Transmit>
 800115e:	4603      	mov	r3, r0
 8001160:	75fb      	strb	r3, [r7, #23]
	}

	SetCS( false ) ;
 8001162:	2300      	movs	r3, #0
 8001164:	75bb      	strb	r3, [r7, #22]
 8001166:	f107 0316 	add.w	r3, r7, #22
 800116a:	4619      	mov	r1, r3
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff fb4b 	bl	8000808 <_ZN6daniel8nRF24L015SetCSERKb>

	if( HAL_OK != spiRes && TYPE::READ == accessType )
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00d      	beq.n	8001194 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x100>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d109      	bne.n	8001194 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x100>
	{
		Log( "nRF24L01: AccessReg  - [ %s ] - error - HAL_SPI_Receive()\r\n" , errType[ spiRes ] ) ;
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x138>)
 8001184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001188:	461a      	mov	r2, r3
 800118a:	4912      	ldr	r1, [pc, #72]	@ (80011d4 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x140>)
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 f891 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>
 8001192:	e00f      	b.n	80011b4 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x120>
	}
	else if( HAL_OK != spiRes && TYPE::WRITE == accessType )
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00c      	beq.n	80011b4 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x120>
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d108      	bne.n	80011b4 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x120>
	{
		Log( "nRF24L01: AccessReg  - [ %s ] - error - HAL_SPI_Transmit()\r\n" , errType[ spiRes ] ) ;
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
 80011a4:	4a09      	ldr	r2, [pc, #36]	@ (80011cc <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x138>)
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	461a      	mov	r2, r3
 80011ac:	490a      	ldr	r1, [pc, #40]	@ (80011d8 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_+0x144>)
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f880 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>
	}

	return res ;
 80011b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	08005a6c 	.word	0x08005a6c
 80011c4:	08005a74 	.word	0x08005a74
 80011c8:	08005a7c 	.word	0x08005a7c
 80011cc:	08005c18 	.word	0x08005c18
 80011d0:	08005a28 	.word	0x08005a28
 80011d4:	08005ac4 	.word	0x08005ac4
 80011d8:	08005b00 	.word	0x08005b00

080011dc <_ZNK6daniel8nRF24L019FlushFIFOEv>:


void daniel::nRF24L01::FlushFIFO() const
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	namespace TYPE = nordic::type ;

	FlushFIFO( TYPE::RX ) ;
 80011e4:	4905      	ldr	r1, [pc, #20]	@ (80011fc <_ZNK6daniel8nRF24L019FlushFIFOEv+0x20>)
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f80c 	bl	8001204 <_ZNK6daniel8nRF24L019FlushFIFOERKh>
	FlushFIFO( TYPE::TX ) ;
 80011ec:	4904      	ldr	r1, [pc, #16]	@ (8001200 <_ZNK6daniel8nRF24L019FlushFIFOEv+0x24>)
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f808 	bl	8001204 <_ZNK6daniel8nRF24L019FlushFIFOERKh>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08005c3b 	.word	0x08005c3b
 8001200:	08005c3c 	.word	0x08005c3c

08001204 <_ZNK6daniel8nRF24L019FlushFIFOERKh>:


void daniel::nRF24L01::FlushFIFO( uint8_t const & mode ) const
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	namespace TYPE = nordic::type ;
	namespace CMD  = nordic::cmd  ;

	Log( "nRF24L01: FlushFIFO  - mode [ %s ]\r\n" , ( TYPE::RX == mode ) ? "FLUSH_RX" : "FLUSH_TX" ) ;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x16>
 8001216:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x80>)
 8001218:	e000      	b.n	800121c <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x18>
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x84>)
 800121c:	461a      	mov	r2, r3
 800121e:	491b      	ldr	r1, [pc, #108]	@ (800128c <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x88>)
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f847 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>

	uint8_t cmd = ( TYPE::RX == mode ) ? CMD::FLUSH_RX : CMD::FLUSH_TX ;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x2e>
 800122e:	23e2      	movs	r3, #226	@ 0xe2
 8001230:	e000      	b.n	8001234 <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x30>
 8001232:	23e1      	movs	r3, #225	@ 0xe1
 8001234:	73bb      	strb	r3, [r7, #14]
	uint8_t ret = 0x00 ;
 8001236:	2300      	movs	r3, #0
 8001238:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef spiRes = HAL_SPI_TransmitReceive( pHandle , & cmd , & ret , 1 , spiTimeOut ) ;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f107 020d 	add.w	r2, r7, #13
 8001242:	f107 010e 	add.w	r1, r7, #14
 8001246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	f002 f9fe 	bl	800364e <HAL_SPI_TransmitReceive>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
	if( HAL_OK != spiRes )
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00e      	beq.n	800127a <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x76>
	{
		Log( "nRF24L01: FlushFIFO  - mode [ %s ] - [ %s ] - error - HAL_SPI_TransmitReceive()\r\n" , ( TYPE::RX == mode ) ? "FLUSH_RX" : "FLUSH_TX" , errType[ spiRes ] ) ;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x64>
 8001264:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x80>)
 8001266:	e000      	b.n	800126a <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x66>
 8001268:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x84>)
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	4908      	ldr	r1, [pc, #32]	@ (8001290 <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x8c>)
 800126e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001272:	4908      	ldr	r1, [pc, #32]	@ (8001294 <_ZNK6daniel8nRF24L019FlushFIFOERKh+0x90>)
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 f81d 	bl	80012b4 <_ZNK6daniel8nRF24L013LogEPKcz>
	}
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	08005b40 	.word	0x08005b40
 8001288:	08005b4c 	.word	0x08005b4c
 800128c:	08005b58 	.word	0x08005b58
 8001290:	08005c18 	.word	0x08005c18
 8001294:	08005b80 	.word	0x08005b80

08001298 <_ZN6daniel8nRF24L017SetUartEPNS_5USARTE>:
	return ret ;
}


void daniel::nRF24L01::SetUart( USART * _pUart )
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	pUart = _pUart ;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	609a      	str	r2, [r3, #8]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
	...

080012b4 <_ZNK6daniel8nRF24L013LogEPKcz>:


void daniel::nRF24L01::Log( char const * const format , ... ) const
{
 80012b4:	b40e      	push	{r1, r2, r3}
 80012b6:	b590      	push	{r4, r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	if( false == leaveLog )
	{
		return ;
	}

	if( nullptr == pUart )
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d014      	beq.n	80012f0 <_ZNK6daniel8nRF24L013LogEPKcz+0x3c>
	}

	static char szBuf[ 1024 ] ;

	va_list args ;
	va_start( args , format ) ;
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	60fb      	str	r3, [r7, #12]
	vsprintf( szBuf , format , args ) ;
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	69f9      	ldr	r1, [r7, #28]
 80012d0:	480b      	ldr	r0, [pc, #44]	@ (8001300 <_ZNK6daniel8nRF24L013LogEPKcz+0x4c>)
 80012d2:	f003 fef9 	bl	80050c8 <vsiprintf>

	pUart->SendMessage( ( uint8_t * ) szBuf , strlen( szBuf ) ) ;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689c      	ldr	r4, [r3, #8]
 80012da:	4809      	ldr	r0, [pc, #36]	@ (8001300 <_ZNK6daniel8nRF24L013LogEPKcz+0x4c>)
 80012dc:	f7fe ffa2 	bl	8000224 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	4906      	ldr	r1, [pc, #24]	@ (8001300 <_ZNK6daniel8nRF24L013LogEPKcz+0x4c>)
 80012e8:	4620      	mov	r0, r4
 80012ea:	f000 fc3e 	bl	8001b6a <_ZNK6daniel5USART11SendMessageEPKht>
 80012ee:	e000      	b.n	80012f2 <_ZNK6daniel8nRF24L013LogEPKcz+0x3e>
		return ;
 80012f0:	bf00      	nop

	va_end( args ) ;
}
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80012fa:	b003      	add	sp, #12
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200001f4 	.word	0x200001f4

08001304 <_ZN6daniel8nRF24L013IrqEv>:


void daniel::nRF24L01::Irq()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	( RfMode::TX == rfMode ) ? IrqTx() : IrqRx() ;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <_ZN6daniel8nRF24L013IrqEv+0x1a>
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f808 	bl	800132c <_ZN6daniel8nRF24L015IrqTxEv>
}
 800131c:	e002      	b.n	8001324 <_ZN6daniel8nRF24L013IrqEv+0x20>
	( RfMode::TX == rfMode ) ? IrqTx() : IrqRx() ;
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f844 	bl	80013ac <_ZN6daniel8nRF24L015IrqRxEv>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZN6daniel8nRF24L015IrqTxEv>:


void daniel::nRF24L01::IrqTx()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
	namespace TYPE = nordic::type ;
	namespace REG  = nordic::reg  ;

	uint8_t status = AccessReg( TYPE::READ , REG::RF_STATUS ) ;
 8001338:	f107 030f 	add.w	r3, r7, #15
 800133c:	4a17      	ldr	r2, [pc, #92]	@ (800139c <_ZN6daniel8nRF24L015IrqTxEv+0x70>)
 800133e:	4918      	ldr	r1, [pc, #96]	@ (80013a0 <_ZN6daniel8nRF24L015IrqTxEv+0x74>)
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fea7 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 8001346:	4603      	mov	r3, r0
 8001348:	73bb      	strb	r3, [r7, #14]

	if( status & 0x20 )
 800134a:	7bbb      	ldrb	r3, [r7, #14]
 800134c:	f003 0320 	and.w	r3, r3, #32
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00b      	beq.n	800136c <_ZN6daniel8nRF24L015IrqTxEv+0x40>
	{
		HAL_GPIO_TogglePin( IRQ_Port , IRQ_Pin ) ;
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <_ZN6daniel8nRF24L015IrqTxEv+0x78>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2101      	movs	r1, #1
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fa24 	bl	80027a8 <HAL_GPIO_TogglePin>
		status = status | 0x20 ;
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	f043 0320 	orr.w	r3, r3, #32
 8001366:	b2db      	uxtb	r3, r3
 8001368:	73bb      	strb	r3, [r7, #14]
 800136a:	e00b      	b.n	8001384 <_ZN6daniel8nRF24L015IrqTxEv+0x58>
	}
	else
	{
		HAL_GPIO_WritePin( IRQ_Port , IRQ_Pin , GPIO_PIN_SET ) ;
 800136c:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <_ZN6daniel8nRF24L015IrqTxEv+0x78>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2201      	movs	r2, #1
 8001372:	2101      	movs	r1, #1
 8001374:	4618      	mov	r0, r3
 8001376:	f001 f9ff 	bl	8002778 <HAL_GPIO_WritePin>
		status = status | 0x10 ;
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	b2db      	uxtb	r3, r3
 8001382:	73bb      	strb	r3, [r7, #14]
	}

	AccessReg( TYPE::WRITE , REG::RF_STATUS , status ) ;
 8001384:	f107 030e 	add.w	r3, r7, #14
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <_ZN6daniel8nRF24L015IrqTxEv+0x70>)
 800138a:	4907      	ldr	r1, [pc, #28]	@ (80013a8 <_ZN6daniel8nRF24L015IrqTxEv+0x7c>)
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fe81 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	08005c2f 	.word	0x08005c2f
 80013a0:	08005c39 	.word	0x08005c39
 80013a4:	20000000 	.word	0x20000000
 80013a8:	08005c3a 	.word	0x08005c3a

080013ac <_ZN6daniel8nRF24L015IrqRxEv>:


void daniel::nRF24L01::IrqRx()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	namespace TYPE = nordic::type ;
	namespace REG  = nordic::reg  ;

	Receive( recvData ) ;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	330d      	adds	r3, #13
 80013b8:	4619      	mov	r1, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fe2c 	bl	8001018 <_ZN6daniel8nRF24L017ReceiveEPh>
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]

	uint8_t status = AccessReg( TYPE::READ , REG::RF_STATUS ) ;
 80013c4:	f107 030f 	add.w	r3, r7, #15
 80013c8:	4a0b      	ldr	r2, [pc, #44]	@ (80013f8 <_ZN6daniel8nRF24L015IrqRxEv+0x4c>)
 80013ca:	490c      	ldr	r1, [pc, #48]	@ (80013fc <_ZN6daniel8nRF24L015IrqRxEv+0x50>)
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fe61 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
 80013d2:	4603      	mov	r3, r0
 80013d4:	73bb      	strb	r3, [r7, #14]
	status = status | 0x40 ;
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	73bb      	strb	r3, [r7, #14]

	AccessReg( TYPE::WRITE , REG::RF_STATUS , status ) ;
 80013e0:	f107 030e 	add.w	r3, r7, #14
 80013e4:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <_ZN6daniel8nRF24L015IrqRxEv+0x4c>)
 80013e6:	4906      	ldr	r1, [pc, #24]	@ (8001400 <_ZN6daniel8nRF24L015IrqRxEv+0x54>)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fe53 	bl	8001094 <_ZN6daniel8nRF24L019AccessRegERKhS2_S2_>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	08005c2f 	.word	0x08005c2f
 80013fc:	08005c39 	.word	0x08005c39
 8001400:	08005c3a 	.word	0x08005c3a

08001404 <_ZN6daniel10RingBufferIhE5AllocERKt>:
	pBuf = nullptr ;
}


template < typename T >
bool daniel::RingBuffer< T >::Alloc( uint16_t const & size )
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
{
	if( 0 != bufferSize || nullptr != pBuf )
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d103      	bne.n	800141e <_ZN6daniel10RingBufferIhE5AllocERKt+0x1a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <_ZN6daniel10RingBufferIhE5AllocERKt+0x1e>
	{
		return false ;
 800141e:	2300      	movs	r3, #0
 8001420:	e01d      	b.n	800145e <_ZN6daniel10RingBufferIhE5AllocERKt+0x5a>
	}

	pBuf = new ( std::nothrow ) T[ size ] ;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	4910      	ldr	r1, [pc, #64]	@ (8001468 <_ZN6daniel10RingBufferIhE5AllocERKt+0x64>)
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fd5b 	bl	8004ee4 <_ZnajRKSt9nothrow_t>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	609a      	str	r2, [r3, #8]

	if( nullptr == pBuf )
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <_ZN6daniel10RingBufferIhE5AllocERKt+0x3e>
	{
		return false ;
 800143e:	2300      	movs	r3, #0
 8001440:	e00d      	b.n	800145e <_ZN6daniel10RingBufferIhE5AllocERKt+0x5a>
	}

	bufferSize = size ;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	801a      	strh	r2, [r3, #0]
	front = 0 ;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	805a      	strh	r2, [r3, #2]
	rear  = 0 ;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	809a      	strh	r2, [r3, #4]
	cnt   = 0 ;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	80da      	strh	r2, [r3, #6]

	return true ;
 800145c:	2301      	movs	r3, #1
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	08005c6a 	.word	0x08005c6a

0800146c <_ZN6daniel10RingBufferIhEC1Ev>:
daniel::RingBuffer< T >::RingBuffer()
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	: bufferSize( 0 ) , front( 0 ) , rear( 0 ) , cnt( 0 ) , pBuf( nullptr )
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	801a      	strh	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	805a      	strh	r2, [r3, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	809a      	strh	r2, [r3, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	80da      	strh	r2, [r3, #6]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
	if( 0 != bufferSize )
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d009      	beq.n	80014ae <_ZN6daniel10RingBufferIhEC1Ev+0x42>
		pBuf = new ( std::nothrow ) T[ bufferSize ] ;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	4906      	ldr	r1, [pc, #24]	@ (80014b8 <_ZN6daniel10RingBufferIhEC1Ev+0x4c>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 fd1f 	bl	8004ee4 <_ZnajRKSt9nothrow_t>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	609a      	str	r2, [r3, #8]
}
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	08005c6a 	.word	0x08005c6a

080014bc <_ZN6daniel10RingBufferIhED1Ev>:
daniel::RingBuffer< T >::~RingBuffer()
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if( nullptr == pBuf )
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <_ZN6daniel10RingBufferIhED1Ev+0x14>
		return ;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	e00c      	b.n	80014ea <_ZN6daniel10RingBufferIhED1Ev+0x2e>
	delete [] pBuf ;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <_ZN6daniel10RingBufferIhED1Ev+0x26>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fcf7 	bl	8004ed0 <_ZdaPv>
	pBuf = nullptr ;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
}
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_MspInit+0x5c>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	4a14      	ldr	r2, [pc, #80]	@ (8001550 <HAL_MspInit+0x5c>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6193      	str	r3, [r2, #24]
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_MspInit+0x5c>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <HAL_MspInit+0x5c>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a0e      	ldr	r2, [pc, #56]	@ (8001550 <HAL_MspInit+0x5c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <HAL_MspInit+0x5c>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <HAL_MspInit+0x60>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4a04      	ldr	r2, [pc, #16]	@ (8001554 <HAL_MspInit+0x60>)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	40021000 	.word	0x40021000
 8001554:	40010000 	.word	0x40010000

08001558 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a1b      	ldr	r2, [pc, #108]	@ (80015e0 <HAL_SPI_MspInit+0x88>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d12f      	bne.n	80015d8 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <HAL_SPI_MspInit+0x8c>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a19      	ldr	r2, [pc, #100]	@ (80015e4 <HAL_SPI_MspInit+0x8c>)
 800157e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <HAL_SPI_MspInit+0x8c>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <HAL_SPI_MspInit+0x8c>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a13      	ldr	r2, [pc, #76]	@ (80015e4 <HAL_SPI_MspInit+0x8c>)
 8001596:	f043 0304 	orr.w	r3, r3, #4
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <HAL_SPI_MspInit+0x8c>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015a8:	23a0      	movs	r3, #160	@ 0xa0
 80015aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <HAL_SPI_MspInit+0x90>)
 80015bc:	f000 fe7c 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015c0:	2340      	movs	r3, #64	@ 0x40
 80015c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4619      	mov	r1, r3
 80015d2:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <HAL_SPI_MspInit+0x90>)
 80015d4:	f000 fe70 	bl	80022b8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015d8:	bf00      	nop
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40013000 	.word	0x40013000
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010800 	.word	0x40010800

080015ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a09      	ldr	r2, [pc, #36]	@ (8001620 <HAL_TIM_Base_MspInit+0x34>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10b      	bne.n	8001616 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015fe:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <HAL_TIM_Base_MspInit+0x38>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a08      	ldr	r2, [pc, #32]	@ (8001624 <HAL_TIM_Base_MspInit+0x38>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_TIM_Base_MspInit+0x38>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40001000 	.word	0x40001000
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a38      	ldr	r2, [pc, #224]	@ (8001724 <HAL_UART_MspInit+0xfc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d132      	bne.n	80016ae <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001648:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <HAL_UART_MspInit+0x100>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a36      	ldr	r2, [pc, #216]	@ (8001728 <HAL_UART_MspInit+0x100>)
 800164e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b34      	ldr	r3, [pc, #208]	@ (8001728 <HAL_UART_MspInit+0x100>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <HAL_UART_MspInit+0x100>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a30      	ldr	r2, [pc, #192]	@ (8001728 <HAL_UART_MspInit+0x100>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b2e      	ldr	r3, [pc, #184]	@ (8001728 <HAL_UART_MspInit+0x100>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001678:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0318 	add.w	r3, r7, #24
 800168a:	4619      	mov	r1, r3
 800168c:	4827      	ldr	r0, [pc, #156]	@ (800172c <HAL_UART_MspInit+0x104>)
 800168e:	f000 fe13 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 0318 	add.w	r3, r7, #24
 80016a4:	4619      	mov	r1, r3
 80016a6:	4821      	ldr	r0, [pc, #132]	@ (800172c <HAL_UART_MspInit+0x104>)
 80016a8:	f000 fe06 	bl	80022b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80016ac:	e036      	b.n	800171c <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001730 <HAL_UART_MspInit+0x108>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d131      	bne.n	800171c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <HAL_UART_MspInit+0x100>)
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001728 <HAL_UART_MspInit+0x100>)
 80016be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016c2:	61d3      	str	r3, [r2, #28]
 80016c4:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <HAL_UART_MspInit+0x100>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_UART_MspInit+0x100>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <HAL_UART_MspInit+0x100>)
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <HAL_UART_MspInit+0x100>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0318 	add.w	r3, r7, #24
 80016fa:	4619      	mov	r1, r3
 80016fc:	480d      	ldr	r0, [pc, #52]	@ (8001734 <HAL_UART_MspInit+0x10c>)
 80016fe:	f000 fddb 	bl	80022b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001702:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0318 	add.w	r3, r7, #24
 8001714:	4619      	mov	r1, r3
 8001716:	4807      	ldr	r0, [pc, #28]	@ (8001734 <HAL_UART_MspInit+0x10c>)
 8001718:	f000 fdce 	bl	80022b8 <HAL_GPIO_Init>
}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	@ 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40013800 	.word	0x40013800
 8001728:	40021000 	.word	0x40021000
 800172c:	40010800 	.word	0x40010800
 8001730:	40004800 	.word	0x40004800
 8001734:	40010c00 	.word	0x40010c00

08001738 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a12      	ldr	r2, [pc, #72]	@ (8001790 <HAL_UART_MspDeInit+0x58>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10e      	bne.n	8001768 <HAL_UART_MspDeInit+0x30>
  {
    /* USER CODE BEGIN USART1_MspDeInit 0 */

    /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_UART_MspDeInit+0x5c>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	4a11      	ldr	r2, [pc, #68]	@ (8001794 <HAL_UART_MspDeInit+0x5c>)
 8001750:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001754:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001756:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800175a:	480f      	ldr	r0, [pc, #60]	@ (8001798 <HAL_UART_MspDeInit+0x60>)
 800175c:	f000 ff40 	bl	80025e0 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001760:	2025      	movs	r0, #37	@ 0x25
 8001762:	f000 fc58 	bl	8002016 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART3_MspDeInit 1 */

    /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8001766:	e00f      	b.n	8001788 <HAL_UART_MspDeInit+0x50>
  else if(huart->Instance==USART3)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0b      	ldr	r2, [pc, #44]	@ (800179c <HAL_UART_MspDeInit+0x64>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10a      	bne.n	8001788 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_UART_MspDeInit+0x5c>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <HAL_UART_MspDeInit+0x5c>)
 8001778:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800177c:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800177e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001782:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <HAL_UART_MspDeInit+0x68>)
 8001784:	f000 ff2c 	bl	80025e0 <HAL_GPIO_DeInit>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40013800 	.word	0x40013800
 8001794:	40021000 	.word	0x40021000
 8001798:	40010800 	.word	0x40010800
 800179c:	40004800 	.word	0x40004800
 80017a0:	40010c00 	.word	0x40010c00

080017a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	@ 0x38
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80017ba:	4b34      	ldr	r3, [pc, #208]	@ (800188c <HAL_InitTick+0xe8>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a33      	ldr	r2, [pc, #204]	@ (800188c <HAL_InitTick+0xe8>)
 80017c0:	f043 0320 	orr.w	r3, r3, #32
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b31      	ldr	r3, [pc, #196]	@ (800188c <HAL_InitTick+0xe8>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d2:	f107 0210 	add.w	r2, r7, #16
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f001 fc07 	bl	8002ff0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d103      	bne.n	80017f4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017ec:	f001 fbd8 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 80017f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80017f2:	e004      	b.n	80017fe <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017f4:	f001 fbd4 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 80017f8:	4603      	mov	r3, r0
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001800:	4a23      	ldr	r2, [pc, #140]	@ (8001890 <HAL_InitTick+0xec>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0c9b      	lsrs	r3, r3, #18
 8001808:	3b01      	subs	r3, #1
 800180a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800180c:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <HAL_InitTick+0xf0>)
 800180e:	4a22      	ldr	r2, [pc, #136]	@ (8001898 <HAL_InitTick+0xf4>)
 8001810:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001812:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <HAL_InitTick+0xf0>)
 8001814:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001818:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800181a:	4a1e      	ldr	r2, [pc, #120]	@ (8001894 <HAL_InitTick+0xf0>)
 800181c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800181e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001820:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <HAL_InitTick+0xf0>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_InitTick+0xf0>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_InitTick+0xf0>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001832:	4818      	ldr	r0, [pc, #96]	@ (8001894 <HAL_InitTick+0xf0>)
 8001834:	f002 fac3 	bl	8003dbe <HAL_TIM_Base_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800183e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001842:	2b00      	cmp	r3, #0
 8001844:	d11b      	bne.n	800187e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001846:	4813      	ldr	r0, [pc, #76]	@ (8001894 <HAL_InitTick+0xf0>)
 8001848:	f002 fb08 	bl	8003e5c <HAL_TIM_Base_Start_IT>
 800184c:	4603      	mov	r3, r0
 800184e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001852:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001856:	2b00      	cmp	r3, #0
 8001858:	d111      	bne.n	800187e <HAL_InitTick+0xda>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800185a:	2037      	movs	r0, #55	@ 0x37
 800185c:	f000 fbcd 	bl	8001ffa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	d808      	bhi.n	8001878 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001866:	2200      	movs	r2, #0
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	2037      	movs	r0, #55	@ 0x37
 800186c:	f000 fba9 	bl	8001fc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001870:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <HAL_InitTick+0xf8>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e002      	b.n	800187e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800187e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001882:	4618      	mov	r0, r3
 8001884:	3738      	adds	r7, #56	@ 0x38
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	431bde83 	.word	0x431bde83
 8001894:	200005f4 	.word	0x200005f4
 8001898:	40001400 	.word	0x40001400
 800189c:	20000008 	.word	0x20000008

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <NMI_Handler+0x4>

080018a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <MemManage_Handler+0x4>

080018b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <BusFault_Handler+0x4>

080018c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <UsageFault_Handler+0x4>

080018c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_IRQ_Pin);
 80018fc:	2001      	movs	r0, #1
 80018fe:	f000 ff6d 	bl	80027dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <SPI1_IRQHandler+0x10>)
 800190e:	f002 f847 	bl	80039a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000007c 	.word	0x2000007c

0800191c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UartRX( &huart1 , 1 ) ;
 8001920:	2101      	movs	r1, #1
 8001922:	4804      	ldr	r0, [pc, #16]	@ (8001934 <USART1_IRQHandler+0x18>)
 8001924:	f7fe feae 	bl	8000684 <UartRX>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <USART1_IRQHandler+0x18>)
 800192a:	f002 fdb7 	bl	800449c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000011c 	.word	0x2000011c

08001938 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <TIM6_IRQHandler+0x10>)
 800193e:	f002 faed 	bl	8003f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200000d4 	.word	0x200000d4

0800194c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <TIM7_IRQHandler+0x10>)
 8001952:	f002 fae3 	bl	8003f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200005f4 	.word	0x200005f4

08001960 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return 1;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <_kill>:

int _kill(int pid, int sig)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001978:	f003 fc0c 	bl	8005194 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	2216      	movs	r2, #22
 8001980:	601a      	str	r2, [r3, #0]
  return -1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_exit>:

void _exit (int status)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001996:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffe7 	bl	800196e <_kill>
  while (1) {}    /* Make sure we hang here */
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <_exit+0x12>

080019a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ac:	4a14      	ldr	r2, [pc, #80]	@ (8001a00 <_sbrk+0x5c>)
 80019ae:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <_sbrk+0x60>)
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b8:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <_sbrk+0x64>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	@ (8001a0c <_sbrk+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d4:	f003 fbde 	bl	8005194 <__errno>
 80019d8:	4603      	mov	r3, r0
 80019da:	220c      	movs	r2, #12
 80019dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019e2:	e009      	b.n	80019f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ea:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <_sbrk+0x64>)
 80019f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2000c000 	.word	0x2000c000
 8001a04:	00000400 	.word	0x00000400
 8001a08:	2000063c 	.word	0x2000063c
 8001a0c:	20000b90 	.word	0x20000b90

08001a10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <_ZN6daniel5USARTC1EP20__UART_HandleTypeDef>:
{
	ringBuf.Alloc( 50 ) ;
}


daniel::USART::USART( UART_HandleTypeDef * _pHandle ) :
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
	pHandle( _pHandle ) , isBegin( false )
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fd1b 	bl	800146c <_ZN6daniel10RingBufferIhEC1Ev>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	741a      	strb	r2, [r3, #16]
{
	ringBuf.Alloc( 50 ) ;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	2232      	movs	r2, #50	@ 0x32
 8001a42:	81fa      	strh	r2, [r7, #14]
 8001a44:	f107 020e 	add.w	r2, r7, #14
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fcda 	bl	8001404 <_ZN6daniel10RingBufferIhE5AllocERKt>
}
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_ZN6daniel5USART5BeginEv>:
	pHandle = _pHandle ;
}


void daniel::USART::Begin()
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
	HAL_UART_DeInit( pHandle ) ;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 fcc0 	bl	80043ec <HAL_UART_DeInit>

	pHandle->Init.BaudRate     = 115200 ;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
	pHandle->Init.WordLength   = UART_WORDLENGTH_8B ;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
	pHandle->Init.StopBits     = UART_STOPBITS_1    ;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
	pHandle->Init.Parity       = UART_PARITY_NONE   ;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
	pHandle->Init.Mode         = UART_MODE_TX_RX     ;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
	pHandle->Init.HwFlowCtl    = UART_HWCONTROL_NONE ;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
	pHandle->Init.OverSampling = UART_OVERSAMPLING_16 ;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]

	HAL_UART_Init( pHandle ) ;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 fc4e 	bl	800434c <HAL_UART_Init>

	pHandle->Instance->CR1 &= 0xFFFFBE3F ;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	f423 4383 	bic.w	r3, r3, #16768	@ 0x4180
 8001ac2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ac6:	60d3      	str	r3, [r2, #12]
	pHandle->Instance->CR3 &= 0xFFFFFFFE ;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	615a      	str	r2, [r3, #20]

	HAL_UART_Receive_IT( pHandle , & UART_rxBuf , 1 ) ;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3311      	adds	r3, #17
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f002 fcb2 	bl	8004450 <HAL_UART_Receive_IT>

	isBegin = true ;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	741a      	strb	r2, [r3, #16]
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_ZNK6daniel5USART9Send_A_CHERKm>:


void daniel::USART::Send_A_CH( uint32_t const & dat ) const
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
	if( nullptr == pHandle || false == isBegin )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d027      	beq.n	8001b5c <_ZNK6daniel5USART9Send_A_CHERKm+0x62>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	7c1b      	ldrb	r3, [r3, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d023      	beq.n	8001b5c <_ZNK6daniel5USART9Send_A_CHERKm+0x62>
	{
		return ;
	}

	uint8_t isEnable = ( 0 < ( pHandle->Instance->CR1 & USART_CR1_UE ) ) ? 0x01 : 0x00 ;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <_ZNK6daniel5USART9Send_A_CHERKm+0x2e>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <_ZNK6daniel5USART9Send_A_CHERKm+0x30>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
	if( 0x00 == isEnable )
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d016      	beq.n	8001b60 <_ZNK6daniel5USART9Send_A_CHERKm+0x66>
	{
		return ;
	}

	while ( ! ( __HAL_UART_GET_FLAG( pHandle , UART_FLAG_TXE ) ) ) ;
 8001b32:	bf00      	nop
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b40:	2b80      	cmp	r3, #128	@ 0x80
 8001b42:	bf14      	ite	ne
 8001b44:	2301      	movne	r3, #1
 8001b46:	2300      	moveq	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f2      	bne.n	8001b34 <_ZNK6daniel5USART9Send_A_CHERKm+0x3a>
	pHandle->Instance->DR = dat ;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	e002      	b.n	8001b62 <_ZNK6daniel5USART9Send_A_CHERKm+0x68>
		return ;
 8001b5c:	bf00      	nop
 8001b5e:	e000      	b.n	8001b62 <_ZNK6daniel5USART9Send_A_CHERKm+0x68>
		return ;
 8001b60:	bf00      	nop
}
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <_ZNK6daniel5USART11SendMessageEPKht>:


void daniel::USART::SendMessage( uint8_t const * const pDat , uint16_t const length ) const
{
 8001b6a:	b590      	push	{r4, r7, lr}
 8001b6c:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001b76:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001b7a:	6018      	str	r0, [r3, #0]
 8001b7c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001b80:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001b84:	6019      	str	r1, [r3, #0]
 8001b86:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001b8a:	f2a3 231a 	subw	r3, r3, #538	@ 0x21a
 8001b8e:	801a      	strh	r2, [r3, #0]
	if( nullptr == pHandle || false == isBegin )
 8001b90:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001b94:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d040      	beq.n	8001c22 <_ZNK6daniel5USART11SendMessageEPKht+0xb8>
 8001ba0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001ba4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	7c1b      	ldrb	r3, [r3, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d038      	beq.n	8001c22 <_ZNK6daniel5USART11SendMessageEPKht+0xb8>
	}

	uint8_t  buf[ 512 ] ;
	uint16_t len ;

	Stuffing( buf , len , pDat , length ) ;
 8001bb0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001bb4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001bb8:	f107 0416 	add.w	r4, r7, #22
 8001bbc:	f107 0118 	add.w	r1, r7, #24
 8001bc0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001bc4:	f5a2 7005 	sub.w	r0, r2, #532	@ 0x214
 8001bc8:	1dba      	adds	r2, r7, #6
 8001bca:	9200      	str	r2, [sp, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4622      	mov	r2, r4
 8001bd0:	6800      	ldr	r0, [r0, #0]
 8001bd2:	f000 f855 	bl	8001c80 <_ZNK6daniel5USART8StuffingEPhRtPKhRKt>

	for( uint16_t pos = 0 ; pos < len ; ++pos )
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
 8001bdc:	e017      	b.n	8001c0e <_ZNK6daniel5USART11SendMessageEPKht+0xa4>
	{
		Send_A_CH( buf[ pos ] ) ;
 8001bde:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 8001be2:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001be6:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8001bf0:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001bf4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001bf8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	f7ff ff7b 	bl	8001afa <_ZNK6daniel5USART9Send_A_CHERKm>
	for( uint16_t pos = 0 ; pos < len ; ++pos )
 8001c04:	f8b7 321e 	ldrh.w	r3, [r7, #542]	@ 0x21e
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
 8001c0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001c12:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	f8b7 221e 	ldrh.w	r2, [r7, #542]	@ 0x21e
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d3de      	bcc.n	8001bde <_ZNK6daniel5USART11SendMessageEPKht+0x74>
 8001c20:	e000      	b.n	8001c24 <_ZNK6daniel5USART11SendMessageEPKht+0xba>
		return ;
 8001c22:	bf00      	nop
	}
}
 8001c24:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd90      	pop	{r4, r7, pc}

08001c2c <_ZNK6daniel5USART11SendMessageEPKcz>:


void daniel::USART::SendMessage( char const * const format , ... ) const
{
 8001c2c:	b40e      	push	{r1, r2, r3}
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
	if( nullptr == pHandle || false == isBegin )
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d016      	beq.n	8001c6c <_ZNK6daniel5USART11SendMessageEPKcz+0x40>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7c1b      	ldrb	r3, [r3, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d012      	beq.n	8001c6c <_ZNK6daniel5USART11SendMessageEPKcz+0x40>
	}

	static char szBuf[ 1024 ] ;

    va_list args ;
	va_start( args , format ) ;
 8001c46:	f107 0320 	add.w	r3, r7, #32
 8001c4a:	60fb      	str	r3, [r7, #12]
	vsprintf( szBuf , format , args ) ;
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	69f9      	ldr	r1, [r7, #28]
 8001c50:	480a      	ldr	r0, [pc, #40]	@ (8001c7c <_ZNK6daniel5USART11SendMessageEPKcz+0x50>)
 8001c52:	f003 fa39 	bl	80050c8 <vsiprintf>

    SendMessage( ( uint8_t * ) szBuf , strlen( szBuf ) ) ;
 8001c56:	4809      	ldr	r0, [pc, #36]	@ (8001c7c <_ZNK6daniel5USART11SendMessageEPKcz+0x50>)
 8001c58:	f7fe fae4 	bl	8000224 <strlen>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	4906      	ldr	r1, [pc, #24]	@ (8001c7c <_ZNK6daniel5USART11SendMessageEPKcz+0x50>)
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff80 	bl	8001b6a <_ZNK6daniel5USART11SendMessageEPKht>
 8001c6a:	e000      	b.n	8001c6e <_ZNK6daniel5USART11SendMessageEPKcz+0x42>
		return ;
 8001c6c:	bf00      	nop

	va_end( args ) ;
}
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c76:	b003      	add	sp, #12
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000640 	.word	0x20000640

08001c80 <_ZNK6daniel5USART8StuffingEPhRtPKhRKt>:


void daniel::USART::Stuffing(
		uint8_t * prBuf , uint16_t & rcnt ,
		uint8_t const * const psBuf , uint16_t const & scnt ) const
{
 8001c80:	b490      	push	{r4, r7}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
	rcnt = 0 ;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	801a      	strh	r2, [r3, #0]

	if( 0x7e == psBuf[ 0 ] && 0x7F == psBuf[ scnt - 1 ] )
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b7e      	cmp	r3, #126	@ 0x7e
 8001c9a:	d143      	bne.n	8001d24 <_ZNK6daniel5USART8StuffingEPhRtPKhRKt+0xa4>
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001caa:	d13b      	bne.n	8001d24 <_ZNK6daniel5USART8StuffingEPhRtPKhRKt+0xa4>
	{
		for( uint16_t pos = 0 ; pos < scnt ; ++pos )
 8001cac:	2300      	movs	r3, #0
 8001cae:	82fb      	strh	r3, [r7, #22]
 8001cb0:	e032      	b.n	8001d18 <_ZNK6daniel5USART8StuffingEPhRtPKhRKt+0x98>
		{
			uint8_t dat = psBuf[ pos ] ;
 8001cb2:	8afb      	ldrh	r3, [r7, #22]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	757b      	strb	r3, [r7, #21]

			if( 0 != pos && ( scnt - 1 ) != pos && ( 0x7D == dat || 0x7E == dat || 0x7F == dat ) )
 8001cbc:	8afb      	ldrh	r3, [r7, #22]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d01c      	beq.n	8001cfc <_ZNK6daniel5USART8StuffingEPhRtPKhRKt+0x7c>
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	1e5a      	subs	r2, r3, #1
 8001cc8:	8afb      	ldrh	r3, [r7, #22]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d016      	beq.n	8001cfc <_ZNK6daniel5USART8StuffingEPhRtPKhRKt+0x7c>
 8001cce:	7d7b      	ldrb	r3, [r7, #21]
 8001cd0:	2b7d      	cmp	r3, #125	@ 0x7d
 8001cd2:	d005      	beq.n	8001ce0 <_ZNK6daniel5USART8StuffingEPhRtPKhRKt+0x60>
 8001cd4:	7d7b      	ldrb	r3, [r7, #21]
 8001cd6:	2b7e      	cmp	r3, #126	@ 0x7e
 8001cd8:	d002      	beq.n	8001ce0 <_ZNK6daniel5USART8StuffingEPhRtPKhRKt+0x60>
 8001cda:	7d7b      	ldrb	r3, [r7, #21]
 8001cdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cde:	d10d      	bne.n	8001cfc <_ZNK6daniel5USART8StuffingEPhRtPKhRKt+0x7c>
			{
				dat = dat ^ 0x20 ;
 8001ce0:	7d7b      	ldrb	r3, [r7, #21]
 8001ce2:	f083 0320 	eor.w	r3, r3, #32
 8001ce6:	757b      	strb	r3, [r7, #21]
				prBuf[ rcnt++ ] = 0x7D ;
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	1c59      	adds	r1, r3, #1
 8001cf0:	b288      	uxth	r0, r1
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	8008      	strh	r0, [r1, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	227d      	movs	r2, #125	@ 0x7d
 8001cfa:	701a      	strb	r2, [r3, #0]
			}
			prBuf[ rcnt++ ] = dat ;
 8001cfc:	7d78      	ldrb	r0, [r7, #21]
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	1c59      	adds	r1, r3, #1
 8001d06:	b28c      	uxth	r4, r1
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	800c      	strh	r4, [r1, #0]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4602      	mov	r2, r0
 8001d10:	701a      	strb	r2, [r3, #0]
		for( uint16_t pos = 0 ; pos < scnt ; ++pos )
 8001d12:	8afb      	ldrh	r3, [r7, #22]
 8001d14:	3301      	adds	r3, #1
 8001d16:	82fb      	strh	r3, [r7, #22]
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	8afa      	ldrh	r2, [r7, #22]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d3c7      	bcc.n	8001cb2 <_ZNK6daniel5USART8StuffingEPhRtPKhRKt+0x32>
		}
	}
 8001d22:	e017      	b.n	8001d54 <_ZNK6daniel5USART8StuffingEPhRtPKhRKt+0xd4>
	else
	{
		for( uint16_t pos = 0 ; pos < scnt ; ++pos )
 8001d24:	2300      	movs	r3, #0
 8001d26:	827b      	strh	r3, [r7, #18]
 8001d28:	e00a      	b.n	8001d40 <_ZNK6daniel5USART8StuffingEPhRtPKhRKt+0xc0>
		{
			prBuf[ pos ] = psBuf[ pos ] ;
 8001d2a:	8a7b      	ldrh	r3, [r7, #18]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	441a      	add	r2, r3
 8001d30:	8a7b      	ldrh	r3, [r7, #18]
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	440b      	add	r3, r1
 8001d36:	7812      	ldrb	r2, [r2, #0]
 8001d38:	701a      	strb	r2, [r3, #0]
		for( uint16_t pos = 0 ; pos < scnt ; ++pos )
 8001d3a:	8a7b      	ldrh	r3, [r7, #18]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	827b      	strh	r3, [r7, #18]
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	8a7a      	ldrh	r2, [r7, #18]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d3ef      	bcc.n	8001d2a <_ZNK6daniel5USART8StuffingEPhRtPKhRKt+0xaa>
		}

		rcnt = scnt ;
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	881a      	ldrh	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	801a      	strh	r2, [r3, #0]
	}
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc90      	pop	{r4, r7}
 8001d5c:	4770      	bx	lr
	...

08001d60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d60:	f7ff fe56 	bl	8001a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d64:	480b      	ldr	r0, [pc, #44]	@ (8001d94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d66:	490c      	ldr	r1, [pc, #48]	@ (8001d98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d68:	4a0c      	ldr	r2, [pc, #48]	@ (8001d9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d6c:	e002      	b.n	8001d74 <LoopCopyDataInit>

08001d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d72:	3304      	adds	r3, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d78:	d3f9      	bcc.n	8001d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7a:	4a09      	ldr	r2, [pc, #36]	@ (8001da0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d7c:	4c09      	ldr	r4, [pc, #36]	@ (8001da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d80:	e001      	b.n	8001d86 <LoopFillZerobss>

08001d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d84:	3204      	adds	r2, #4

08001d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d88:	d3fb      	bcc.n	8001d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d8a:	f003 fa09 	bl	80051a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d8e:	f7fe fa51 	bl	8000234 <main>
  bx lr
 8001d92:	4770      	bx	lr
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001d9c:	08005cb8 	.word	0x08005cb8
  ldr r2, =_sbss
 8001da0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001da4:	20000b90 	.word	0x20000b90

08001da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC1_2_IRQHandler>
	...

08001dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <HAL_Init+0x28>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a07      	ldr	r2, [pc, #28]	@ (8001dd4 <HAL_Init+0x28>)
 8001db6:	f043 0310 	orr.w	r3, r3, #16
 8001dba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f000 f8f5 	bl	8001fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff fcee 	bl	80017a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc8:	f7ff fb94 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40022000 	.word	0x40022000

08001dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ddc:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <HAL_IncTick+0x1c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <HAL_IncTick+0x20>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	4a03      	ldr	r2, [pc, #12]	@ (8001df8 <HAL_IncTick+0x20>)
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	20000a40 	.word	0x20000a40

08001dfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b02      	ldr	r3, [pc, #8]	@ (8001e0c <HAL_GetTick+0x10>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	20000a40 	.word	0x20000a40

08001e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e42:	4a04      	ldr	r2, [pc, #16]	@ (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	60d3      	str	r3, [r2, #12]
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e5c:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <__NVIC_GetPriorityGrouping+0x18>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	f003 0307 	and.w	r3, r3, #7
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	db0b      	blt.n	8001e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	f003 021f 	and.w	r2, r3, #31
 8001e8c:	4906      	ldr	r1, [pc, #24]	@ (8001ea8 <__NVIC_EnableIRQ+0x34>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	2001      	movs	r0, #1
 8001e96:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	e000e100 	.word	0xe000e100

08001eac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db12      	blt.n	8001ee4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	490a      	ldr	r1, [pc, #40]	@ (8001ef0 <__NVIC_DisableIRQ+0x44>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	3320      	adds	r3, #32
 8001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed8:	f3bf 8f4f 	dsb	sy
}
 8001edc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ede:	f3bf 8f6f 	isb	sy
}
 8001ee2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	@ (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	@ (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	@ 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	@ 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff2b 	bl	8001e10 <__NVIC_SetPriorityGrouping>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd4:	f7ff ff40 	bl	8001e58 <__NVIC_GetPriorityGrouping>
 8001fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	6978      	ldr	r0, [r7, #20]
 8001fe0:	f7ff ffb2 	bl	8001f48 <NVIC_EncodePriority>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff81 	bl	8001ef4 <__NVIC_SetPriority>
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff33 	bl	8001e74 <__NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff41 	bl	8001eac <__NVIC_DisableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002032:	b480      	push	{r7}
 8002034:	b085      	sub	sp, #20
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d008      	beq.n	800205c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2204      	movs	r2, #4
 800204e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e020      	b.n	800209e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 020e 	bic.w	r2, r2, #14
 800206a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002084:	2101      	movs	r1, #1
 8002086:	fa01 f202 	lsl.w	r2, r1, r2
 800208a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800209c:	7bfb      	ldrb	r3, [r7, #15]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d005      	beq.n	80020cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2204      	movs	r2, #4
 80020c4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	e0d6      	b.n	800227a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 020e 	bic.w	r2, r2, #14
 80020da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b64      	ldr	r3, [pc, #400]	@ (8002284 <HAL_DMA_Abort_IT+0x1dc>)
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d958      	bls.n	80021aa <HAL_DMA_Abort_IT+0x102>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a62      	ldr	r2, [pc, #392]	@ (8002288 <HAL_DMA_Abort_IT+0x1e0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d04f      	beq.n	80021a2 <HAL_DMA_Abort_IT+0xfa>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a61      	ldr	r2, [pc, #388]	@ (800228c <HAL_DMA_Abort_IT+0x1e4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d048      	beq.n	800219e <HAL_DMA_Abort_IT+0xf6>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a5f      	ldr	r2, [pc, #380]	@ (8002290 <HAL_DMA_Abort_IT+0x1e8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d040      	beq.n	8002198 <HAL_DMA_Abort_IT+0xf0>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a5e      	ldr	r2, [pc, #376]	@ (8002294 <HAL_DMA_Abort_IT+0x1ec>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d038      	beq.n	8002192 <HAL_DMA_Abort_IT+0xea>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a5c      	ldr	r2, [pc, #368]	@ (8002298 <HAL_DMA_Abort_IT+0x1f0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d030      	beq.n	800218c <HAL_DMA_Abort_IT+0xe4>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a5b      	ldr	r2, [pc, #364]	@ (800229c <HAL_DMA_Abort_IT+0x1f4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d028      	beq.n	8002186 <HAL_DMA_Abort_IT+0xde>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a52      	ldr	r2, [pc, #328]	@ (8002284 <HAL_DMA_Abort_IT+0x1dc>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d020      	beq.n	8002180 <HAL_DMA_Abort_IT+0xd8>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a57      	ldr	r2, [pc, #348]	@ (80022a0 <HAL_DMA_Abort_IT+0x1f8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d019      	beq.n	800217c <HAL_DMA_Abort_IT+0xd4>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a55      	ldr	r2, [pc, #340]	@ (80022a4 <HAL_DMA_Abort_IT+0x1fc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d012      	beq.n	8002178 <HAL_DMA_Abort_IT+0xd0>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a54      	ldr	r2, [pc, #336]	@ (80022a8 <HAL_DMA_Abort_IT+0x200>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00a      	beq.n	8002172 <HAL_DMA_Abort_IT+0xca>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a52      	ldr	r2, [pc, #328]	@ (80022ac <HAL_DMA_Abort_IT+0x204>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d102      	bne.n	800216c <HAL_DMA_Abort_IT+0xc4>
 8002166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800216a:	e01b      	b.n	80021a4 <HAL_DMA_Abort_IT+0xfc>
 800216c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002170:	e018      	b.n	80021a4 <HAL_DMA_Abort_IT+0xfc>
 8002172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002176:	e015      	b.n	80021a4 <HAL_DMA_Abort_IT+0xfc>
 8002178:	2310      	movs	r3, #16
 800217a:	e013      	b.n	80021a4 <HAL_DMA_Abort_IT+0xfc>
 800217c:	2301      	movs	r3, #1
 800217e:	e011      	b.n	80021a4 <HAL_DMA_Abort_IT+0xfc>
 8002180:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002184:	e00e      	b.n	80021a4 <HAL_DMA_Abort_IT+0xfc>
 8002186:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800218a:	e00b      	b.n	80021a4 <HAL_DMA_Abort_IT+0xfc>
 800218c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002190:	e008      	b.n	80021a4 <HAL_DMA_Abort_IT+0xfc>
 8002192:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002196:	e005      	b.n	80021a4 <HAL_DMA_Abort_IT+0xfc>
 8002198:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800219c:	e002      	b.n	80021a4 <HAL_DMA_Abort_IT+0xfc>
 800219e:	2310      	movs	r3, #16
 80021a0:	e000      	b.n	80021a4 <HAL_DMA_Abort_IT+0xfc>
 80021a2:	2301      	movs	r3, #1
 80021a4:	4a42      	ldr	r2, [pc, #264]	@ (80022b0 <HAL_DMA_Abort_IT+0x208>)
 80021a6:	6053      	str	r3, [r2, #4]
 80021a8:	e057      	b.n	800225a <HAL_DMA_Abort_IT+0x1b2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a36      	ldr	r2, [pc, #216]	@ (8002288 <HAL_DMA_Abort_IT+0x1e0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d04f      	beq.n	8002254 <HAL_DMA_Abort_IT+0x1ac>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a34      	ldr	r2, [pc, #208]	@ (800228c <HAL_DMA_Abort_IT+0x1e4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d048      	beq.n	8002250 <HAL_DMA_Abort_IT+0x1a8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a33      	ldr	r2, [pc, #204]	@ (8002290 <HAL_DMA_Abort_IT+0x1e8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d040      	beq.n	800224a <HAL_DMA_Abort_IT+0x1a2>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a31      	ldr	r2, [pc, #196]	@ (8002294 <HAL_DMA_Abort_IT+0x1ec>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d038      	beq.n	8002244 <HAL_DMA_Abort_IT+0x19c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a30      	ldr	r2, [pc, #192]	@ (8002298 <HAL_DMA_Abort_IT+0x1f0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d030      	beq.n	800223e <HAL_DMA_Abort_IT+0x196>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2e      	ldr	r2, [pc, #184]	@ (800229c <HAL_DMA_Abort_IT+0x1f4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d028      	beq.n	8002238 <HAL_DMA_Abort_IT+0x190>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a26      	ldr	r2, [pc, #152]	@ (8002284 <HAL_DMA_Abort_IT+0x1dc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d020      	beq.n	8002232 <HAL_DMA_Abort_IT+0x18a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2a      	ldr	r2, [pc, #168]	@ (80022a0 <HAL_DMA_Abort_IT+0x1f8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d019      	beq.n	800222e <HAL_DMA_Abort_IT+0x186>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a29      	ldr	r2, [pc, #164]	@ (80022a4 <HAL_DMA_Abort_IT+0x1fc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d012      	beq.n	800222a <HAL_DMA_Abort_IT+0x182>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a27      	ldr	r2, [pc, #156]	@ (80022a8 <HAL_DMA_Abort_IT+0x200>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00a      	beq.n	8002224 <HAL_DMA_Abort_IT+0x17c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a26      	ldr	r2, [pc, #152]	@ (80022ac <HAL_DMA_Abort_IT+0x204>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d102      	bne.n	800221e <HAL_DMA_Abort_IT+0x176>
 8002218:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800221c:	e01b      	b.n	8002256 <HAL_DMA_Abort_IT+0x1ae>
 800221e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002222:	e018      	b.n	8002256 <HAL_DMA_Abort_IT+0x1ae>
 8002224:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002228:	e015      	b.n	8002256 <HAL_DMA_Abort_IT+0x1ae>
 800222a:	2310      	movs	r3, #16
 800222c:	e013      	b.n	8002256 <HAL_DMA_Abort_IT+0x1ae>
 800222e:	2301      	movs	r3, #1
 8002230:	e011      	b.n	8002256 <HAL_DMA_Abort_IT+0x1ae>
 8002232:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002236:	e00e      	b.n	8002256 <HAL_DMA_Abort_IT+0x1ae>
 8002238:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800223c:	e00b      	b.n	8002256 <HAL_DMA_Abort_IT+0x1ae>
 800223e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002242:	e008      	b.n	8002256 <HAL_DMA_Abort_IT+0x1ae>
 8002244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002248:	e005      	b.n	8002256 <HAL_DMA_Abort_IT+0x1ae>
 800224a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800224e:	e002      	b.n	8002256 <HAL_DMA_Abort_IT+0x1ae>
 8002250:	2310      	movs	r3, #16
 8002252:	e000      	b.n	8002256 <HAL_DMA_Abort_IT+0x1ae>
 8002254:	2301      	movs	r3, #1
 8002256:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <HAL_DMA_Abort_IT+0x20c>)
 8002258:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
    } 
  }
  return status;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40020080 	.word	0x40020080
 8002288:	40020008 	.word	0x40020008
 800228c:	4002001c 	.word	0x4002001c
 8002290:	40020030 	.word	0x40020030
 8002294:	40020044 	.word	0x40020044
 8002298:	40020058 	.word	0x40020058
 800229c:	4002006c 	.word	0x4002006c
 80022a0:	40020408 	.word	0x40020408
 80022a4:	4002041c 	.word	0x4002041c
 80022a8:	40020430 	.word	0x40020430
 80022ac:	40020444 	.word	0x40020444
 80022b0:	40020400 	.word	0x40020400
 80022b4:	40020000 	.word	0x40020000

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b08b      	sub	sp, #44	@ 0x2c
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ca:	e179      	b.n	80025c0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022cc:	2201      	movs	r2, #1
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	f040 8168 	bne.w	80025ba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a96      	ldr	r2, [pc, #600]	@ (8002548 <HAL_GPIO_Init+0x290>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d05e      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 80022f4:	4a94      	ldr	r2, [pc, #592]	@ (8002548 <HAL_GPIO_Init+0x290>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d875      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 80022fa:	4a94      	ldr	r2, [pc, #592]	@ (800254c <HAL_GPIO_Init+0x294>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d058      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 8002300:	4a92      	ldr	r2, [pc, #584]	@ (800254c <HAL_GPIO_Init+0x294>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d86f      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 8002306:	4a92      	ldr	r2, [pc, #584]	@ (8002550 <HAL_GPIO_Init+0x298>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d052      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 800230c:	4a90      	ldr	r2, [pc, #576]	@ (8002550 <HAL_GPIO_Init+0x298>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d869      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 8002312:	4a90      	ldr	r2, [pc, #576]	@ (8002554 <HAL_GPIO_Init+0x29c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d04c      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 8002318:	4a8e      	ldr	r2, [pc, #568]	@ (8002554 <HAL_GPIO_Init+0x29c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d863      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 800231e:	4a8e      	ldr	r2, [pc, #568]	@ (8002558 <HAL_GPIO_Init+0x2a0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d046      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 8002324:	4a8c      	ldr	r2, [pc, #560]	@ (8002558 <HAL_GPIO_Init+0x2a0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d85d      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 800232a:	2b12      	cmp	r3, #18
 800232c:	d82a      	bhi.n	8002384 <HAL_GPIO_Init+0xcc>
 800232e:	2b12      	cmp	r3, #18
 8002330:	d859      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 8002332:	a201      	add	r2, pc, #4	@ (adr r2, 8002338 <HAL_GPIO_Init+0x80>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	080023b3 	.word	0x080023b3
 800233c:	0800238d 	.word	0x0800238d
 8002340:	0800239f 	.word	0x0800239f
 8002344:	080023e1 	.word	0x080023e1
 8002348:	080023e7 	.word	0x080023e7
 800234c:	080023e7 	.word	0x080023e7
 8002350:	080023e7 	.word	0x080023e7
 8002354:	080023e7 	.word	0x080023e7
 8002358:	080023e7 	.word	0x080023e7
 800235c:	080023e7 	.word	0x080023e7
 8002360:	080023e7 	.word	0x080023e7
 8002364:	080023e7 	.word	0x080023e7
 8002368:	080023e7 	.word	0x080023e7
 800236c:	080023e7 	.word	0x080023e7
 8002370:	080023e7 	.word	0x080023e7
 8002374:	080023e7 	.word	0x080023e7
 8002378:	080023e7 	.word	0x080023e7
 800237c:	08002395 	.word	0x08002395
 8002380:	080023a9 	.word	0x080023a9
 8002384:	4a75      	ldr	r2, [pc, #468]	@ (800255c <HAL_GPIO_Init+0x2a4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800238a:	e02c      	b.n	80023e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	623b      	str	r3, [r7, #32]
          break;
 8002392:	e029      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	3304      	adds	r3, #4
 800239a:	623b      	str	r3, [r7, #32]
          break;
 800239c:	e024      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	3308      	adds	r3, #8
 80023a4:	623b      	str	r3, [r7, #32]
          break;
 80023a6:	e01f      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	330c      	adds	r3, #12
 80023ae:	623b      	str	r3, [r7, #32]
          break;
 80023b0:	e01a      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ba:	2304      	movs	r3, #4
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e013      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c8:	2308      	movs	r3, #8
 80023ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	611a      	str	r2, [r3, #16]
          break;
 80023d2:	e009      	b.n	80023e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d4:	2308      	movs	r3, #8
 80023d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	615a      	str	r2, [r3, #20]
          break;
 80023de:	e003      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
          break;
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          break;
 80023e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2bff      	cmp	r3, #255	@ 0xff
 80023ec:	d801      	bhi.n	80023f2 <HAL_GPIO_Init+0x13a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	e001      	b.n	80023f6 <HAL_GPIO_Init+0x13e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3304      	adds	r3, #4
 80023f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2bff      	cmp	r3, #255	@ 0xff
 80023fc:	d802      	bhi.n	8002404 <HAL_GPIO_Init+0x14c>
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	e002      	b.n	800240a <HAL_GPIO_Init+0x152>
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	3b08      	subs	r3, #8
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	210f      	movs	r1, #15
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	401a      	ands	r2, r3
 800241c:	6a39      	ldr	r1, [r7, #32]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	431a      	orrs	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80c1 	beq.w	80025ba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002438:	4b49      	ldr	r3, [pc, #292]	@ (8002560 <HAL_GPIO_Init+0x2a8>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	4a48      	ldr	r2, [pc, #288]	@ (8002560 <HAL_GPIO_Init+0x2a8>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6193      	str	r3, [r2, #24]
 8002444:	4b46      	ldr	r3, [pc, #280]	@ (8002560 <HAL_GPIO_Init+0x2a8>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002450:	4a44      	ldr	r2, [pc, #272]	@ (8002564 <HAL_GPIO_Init+0x2ac>)
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3c      	ldr	r2, [pc, #240]	@ (8002568 <HAL_GPIO_Init+0x2b0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d01f      	beq.n	80024bc <HAL_GPIO_Init+0x204>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a3b      	ldr	r2, [pc, #236]	@ (800256c <HAL_GPIO_Init+0x2b4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d019      	beq.n	80024b8 <HAL_GPIO_Init+0x200>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3a      	ldr	r2, [pc, #232]	@ (8002570 <HAL_GPIO_Init+0x2b8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d013      	beq.n	80024b4 <HAL_GPIO_Init+0x1fc>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a39      	ldr	r2, [pc, #228]	@ (8002574 <HAL_GPIO_Init+0x2bc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00d      	beq.n	80024b0 <HAL_GPIO_Init+0x1f8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a38      	ldr	r2, [pc, #224]	@ (8002578 <HAL_GPIO_Init+0x2c0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d007      	beq.n	80024ac <HAL_GPIO_Init+0x1f4>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a37      	ldr	r2, [pc, #220]	@ (800257c <HAL_GPIO_Init+0x2c4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d101      	bne.n	80024a8 <HAL_GPIO_Init+0x1f0>
 80024a4:	2305      	movs	r3, #5
 80024a6:	e00a      	b.n	80024be <HAL_GPIO_Init+0x206>
 80024a8:	2306      	movs	r3, #6
 80024aa:	e008      	b.n	80024be <HAL_GPIO_Init+0x206>
 80024ac:	2304      	movs	r3, #4
 80024ae:	e006      	b.n	80024be <HAL_GPIO_Init+0x206>
 80024b0:	2303      	movs	r3, #3
 80024b2:	e004      	b.n	80024be <HAL_GPIO_Init+0x206>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e002      	b.n	80024be <HAL_GPIO_Init+0x206>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_GPIO_Init+0x206>
 80024bc:	2300      	movs	r3, #0
 80024be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c0:	f002 0203 	and.w	r2, r2, #3
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	4093      	lsls	r3, r2
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ce:	4925      	ldr	r1, [pc, #148]	@ (8002564 <HAL_GPIO_Init+0x2ac>)
 80024d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	3302      	adds	r3, #2
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024e8:	4b25      	ldr	r3, [pc, #148]	@ (8002580 <HAL_GPIO_Init+0x2c8>)
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	4924      	ldr	r1, [pc, #144]	@ (8002580 <HAL_GPIO_Init+0x2c8>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024f6:	4b22      	ldr	r3, [pc, #136]	@ (8002580 <HAL_GPIO_Init+0x2c8>)
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4920      	ldr	r1, [pc, #128]	@ (8002580 <HAL_GPIO_Init+0x2c8>)
 8002500:	4013      	ands	r3, r2
 8002502:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002510:	4b1b      	ldr	r3, [pc, #108]	@ (8002580 <HAL_GPIO_Init+0x2c8>)
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	491a      	ldr	r1, [pc, #104]	@ (8002580 <HAL_GPIO_Init+0x2c8>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	60cb      	str	r3, [r1, #12]
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800251e:	4b18      	ldr	r3, [pc, #96]	@ (8002580 <HAL_GPIO_Init+0x2c8>)
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	43db      	mvns	r3, r3
 8002526:	4916      	ldr	r1, [pc, #88]	@ (8002580 <HAL_GPIO_Init+0x2c8>)
 8002528:	4013      	ands	r3, r2
 800252a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d025      	beq.n	8002584 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002538:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <HAL_GPIO_Init+0x2c8>)
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4910      	ldr	r1, [pc, #64]	@ (8002580 <HAL_GPIO_Init+0x2c8>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
 8002544:	e025      	b.n	8002592 <HAL_GPIO_Init+0x2da>
 8002546:	bf00      	nop
 8002548:	10320000 	.word	0x10320000
 800254c:	10310000 	.word	0x10310000
 8002550:	10220000 	.word	0x10220000
 8002554:	10210000 	.word	0x10210000
 8002558:	10120000 	.word	0x10120000
 800255c:	10110000 	.word	0x10110000
 8002560:	40021000 	.word	0x40021000
 8002564:	40010000 	.word	0x40010000
 8002568:	40010800 	.word	0x40010800
 800256c:	40010c00 	.word	0x40010c00
 8002570:	40011000 	.word	0x40011000
 8002574:	40011400 	.word	0x40011400
 8002578:	40011800 	.word	0x40011800
 800257c:	40011c00 	.word	0x40011c00
 8002580:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002584:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <HAL_GPIO_Init+0x324>)
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	43db      	mvns	r3, r3
 800258c:	4913      	ldr	r1, [pc, #76]	@ (80025dc <HAL_GPIO_Init+0x324>)
 800258e:	4013      	ands	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800259e:	4b0f      	ldr	r3, [pc, #60]	@ (80025dc <HAL_GPIO_Init+0x324>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	490e      	ldr	r1, [pc, #56]	@ (80025dc <HAL_GPIO_Init+0x324>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
 80025aa:	e006      	b.n	80025ba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_GPIO_Init+0x324>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	4909      	ldr	r1, [pc, #36]	@ (80025dc <HAL_GPIO_Init+0x324>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	3301      	adds	r3, #1
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f47f ae7e 	bne.w	80022cc <HAL_GPIO_Init+0x14>
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	372c      	adds	r7, #44	@ 0x2c
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	40010400 	.word	0x40010400

080025e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80025ee:	e0a6      	b.n	800273e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80025f0:	2201      	movs	r2, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8099 	beq.w	8002738 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002606:	4a54      	ldr	r2, [pc, #336]	@ (8002758 <HAL_GPIO_DeInit+0x178>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4013      	ands	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a4c      	ldr	r2, [pc, #304]	@ (800275c <HAL_GPIO_DeInit+0x17c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d01f      	beq.n	8002670 <HAL_GPIO_DeInit+0x90>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a4b      	ldr	r2, [pc, #300]	@ (8002760 <HAL_GPIO_DeInit+0x180>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d019      	beq.n	800266c <HAL_GPIO_DeInit+0x8c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a4a      	ldr	r2, [pc, #296]	@ (8002764 <HAL_GPIO_DeInit+0x184>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d013      	beq.n	8002668 <HAL_GPIO_DeInit+0x88>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a49      	ldr	r2, [pc, #292]	@ (8002768 <HAL_GPIO_DeInit+0x188>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00d      	beq.n	8002664 <HAL_GPIO_DeInit+0x84>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a48      	ldr	r2, [pc, #288]	@ (800276c <HAL_GPIO_DeInit+0x18c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d007      	beq.n	8002660 <HAL_GPIO_DeInit+0x80>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a47      	ldr	r2, [pc, #284]	@ (8002770 <HAL_GPIO_DeInit+0x190>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d101      	bne.n	800265c <HAL_GPIO_DeInit+0x7c>
 8002658:	2305      	movs	r3, #5
 800265a:	e00a      	b.n	8002672 <HAL_GPIO_DeInit+0x92>
 800265c:	2306      	movs	r3, #6
 800265e:	e008      	b.n	8002672 <HAL_GPIO_DeInit+0x92>
 8002660:	2304      	movs	r3, #4
 8002662:	e006      	b.n	8002672 <HAL_GPIO_DeInit+0x92>
 8002664:	2303      	movs	r3, #3
 8002666:	e004      	b.n	8002672 <HAL_GPIO_DeInit+0x92>
 8002668:	2302      	movs	r3, #2
 800266a:	e002      	b.n	8002672 <HAL_GPIO_DeInit+0x92>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_GPIO_DeInit+0x92>
 8002670:	2300      	movs	r3, #0
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	f002 0203 	and.w	r2, r2, #3
 8002678:	0092      	lsls	r2, r2, #2
 800267a:	4093      	lsls	r3, r2
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	429a      	cmp	r2, r3
 8002680:	d132      	bne.n	80026e8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002682:	4b3c      	ldr	r3, [pc, #240]	@ (8002774 <HAL_GPIO_DeInit+0x194>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	43db      	mvns	r3, r3
 800268a:	493a      	ldr	r1, [pc, #232]	@ (8002774 <HAL_GPIO_DeInit+0x194>)
 800268c:	4013      	ands	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002690:	4b38      	ldr	r3, [pc, #224]	@ (8002774 <HAL_GPIO_DeInit+0x194>)
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	43db      	mvns	r3, r3
 8002698:	4936      	ldr	r1, [pc, #216]	@ (8002774 <HAL_GPIO_DeInit+0x194>)
 800269a:	4013      	ands	r3, r2
 800269c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800269e:	4b35      	ldr	r3, [pc, #212]	@ (8002774 <HAL_GPIO_DeInit+0x194>)
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	4933      	ldr	r1, [pc, #204]	@ (8002774 <HAL_GPIO_DeInit+0x194>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80026ac:	4b31      	ldr	r3, [pc, #196]	@ (8002774 <HAL_GPIO_DeInit+0x194>)
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	492f      	ldr	r1, [pc, #188]	@ (8002774 <HAL_GPIO_DeInit+0x194>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	220f      	movs	r2, #15
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80026ca:	4a23      	ldr	r2, [pc, #140]	@ (8002758 <HAL_GPIO_DeInit+0x178>)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	43da      	mvns	r2, r3
 80026da:	481f      	ldr	r0, [pc, #124]	@ (8002758 <HAL_GPIO_DeInit+0x178>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	400a      	ands	r2, r1
 80026e2:	3302      	adds	r3, #2
 80026e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2bff      	cmp	r3, #255	@ 0xff
 80026ec:	d801      	bhi.n	80026f2 <HAL_GPIO_DeInit+0x112>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	e001      	b.n	80026f6 <HAL_GPIO_DeInit+0x116>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2bff      	cmp	r3, #255	@ 0xff
 80026fc:	d802      	bhi.n	8002704 <HAL_GPIO_DeInit+0x124>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	e002      	b.n	800270a <HAL_GPIO_DeInit+0x12a>
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	3b08      	subs	r3, #8
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	210f      	movs	r1, #15
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	401a      	ands	r2, r3
 800271c:	2104      	movs	r1, #4
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	431a      	orrs	r2, r3
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	3301      	adds	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	f47f af52 	bne.w	80025f0 <HAL_GPIO_DeInit+0x10>
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3724      	adds	r7, #36	@ 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	40010000 	.word	0x40010000
 800275c:	40010800 	.word	0x40010800
 8002760:	40010c00 	.word	0x40010c00
 8002764:	40011000 	.word	0x40011000
 8002768:	40011400 	.word	0x40011400
 800276c:	40011800 	.word	0x40011800
 8002770:	40011c00 	.word	0x40011c00
 8002774:	40010400 	.word	0x40010400

08002778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
 8002784:	4613      	mov	r3, r2
 8002786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002788:	787b      	ldrb	r3, [r7, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002794:	e003      	b.n	800279e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	041a      	lsls	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	611a      	str	r2, [r3, #16]
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4013      	ands	r3, r2
 80027c0:	041a      	lsls	r2, r3, #16
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	43d9      	mvns	r1, r3
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	400b      	ands	r3, r1
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	611a      	str	r2, [r3, #16]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027e6:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d006      	beq.n	8002800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027f2:	4a05      	ldr	r2, [pc, #20]	@ (8002808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd ff94 	bl	8000728 <HAL_GPIO_EXTI_Callback>
  }
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40010400 	.word	0x40010400

0800280c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e272      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8087 	beq.w	800293a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800282c:	4b92      	ldr	r3, [pc, #584]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b04      	cmp	r3, #4
 8002836:	d00c      	beq.n	8002852 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002838:	4b8f      	ldr	r3, [pc, #572]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b08      	cmp	r3, #8
 8002842:	d112      	bne.n	800286a <HAL_RCC_OscConfig+0x5e>
 8002844:	4b8c      	ldr	r3, [pc, #560]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002850:	d10b      	bne.n	800286a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002852:	4b89      	ldr	r3, [pc, #548]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d06c      	beq.n	8002938 <HAL_RCC_OscConfig+0x12c>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d168      	bne.n	8002938 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e24c      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x76>
 8002874:	4b80      	ldr	r3, [pc, #512]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a7f      	ldr	r2, [pc, #508]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800287a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	e02e      	b.n	80028e0 <HAL_RCC_OscConfig+0xd4>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x98>
 800288a:	4b7b      	ldr	r3, [pc, #492]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a7a      	ldr	r2, [pc, #488]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b78      	ldr	r3, [pc, #480]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a77      	ldr	r2, [pc, #476]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800289c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e01d      	b.n	80028e0 <HAL_RCC_OscConfig+0xd4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0xbc>
 80028ae:	4b72      	ldr	r3, [pc, #456]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a71      	ldr	r2, [pc, #452]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6e      	ldr	r2, [pc, #440]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e00b      	b.n	80028e0 <HAL_RCC_OscConfig+0xd4>
 80028c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b68      	ldr	r3, [pc, #416]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a67      	ldr	r2, [pc, #412]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80028da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d013      	beq.n	8002910 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7ff fa88 	bl	8001dfc <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7ff fa84 	bl	8001dfc <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	@ 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e200      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b5d      	ldr	r3, [pc, #372]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0xe4>
 800290e:	e014      	b.n	800293a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7ff fa74 	bl	8001dfc <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002918:	f7ff fa70 	bl	8001dfc <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	@ 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e1ec      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	4b53      	ldr	r3, [pc, #332]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x10c>
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d063      	beq.n	8002a0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002946:	4b4c      	ldr	r3, [pc, #304]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002952:	4b49      	ldr	r3, [pc, #292]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b08      	cmp	r3, #8
 800295c:	d11c      	bne.n	8002998 <HAL_RCC_OscConfig+0x18c>
 800295e:	4b46      	ldr	r3, [pc, #280]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d116      	bne.n	8002998 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	4b43      	ldr	r3, [pc, #268]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_RCC_OscConfig+0x176>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e1c0      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002982:	4b3d      	ldr	r3, [pc, #244]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4939      	ldr	r1, [pc, #228]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	e03a      	b.n	8002a0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a0:	4b36      	ldr	r3, [pc, #216]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7ff fa29 	bl	8001dfc <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ae:	f7ff fa25 	bl	8001dfc <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e1a1      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4927      	ldr	r1, [pc, #156]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]
 80029e0:	e015      	b.n	8002a0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e2:	4b26      	ldr	r3, [pc, #152]	@ (8002a7c <HAL_RCC_OscConfig+0x270>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7ff fa08 	bl	8001dfc <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f0:	f7ff fa04 	bl	8001dfc <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e180      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	4b1d      	ldr	r3, [pc, #116]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d03a      	beq.n	8002a90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d019      	beq.n	8002a56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a22:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a28:	f7ff f9e8 	bl	8001dfc <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a30:	f7ff f9e4 	bl	8001dfc <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e160      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f000 fafe 	bl	8003050 <RCC_Delay>
 8002a54:	e01c      	b.n	8002a90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a56:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5c:	f7ff f9ce 	bl	8001dfc <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a62:	e00f      	b.n	8002a84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a64:	f7ff f9ca 	bl	8001dfc <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d908      	bls.n	8002a84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e146      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	42420000 	.word	0x42420000
 8002a80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a84:	4b92      	ldr	r3, [pc, #584]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e9      	bne.n	8002a64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80a6 	beq.w	8002bea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa2:	4b8b      	ldr	r3, [pc, #556]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	4b88      	ldr	r3, [pc, #544]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	4a87      	ldr	r2, [pc, #540]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab8:	61d3      	str	r3, [r2, #28]
 8002aba:	4b85      	ldr	r3, [pc, #532]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aca:	4b82      	ldr	r3, [pc, #520]	@ (8002cd4 <HAL_RCC_OscConfig+0x4c8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d118      	bne.n	8002b08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8002cd4 <HAL_RCC_OscConfig+0x4c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a7e      	ldr	r2, [pc, #504]	@ (8002cd4 <HAL_RCC_OscConfig+0x4c8>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae2:	f7ff f98b 	bl	8001dfc <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aea:	f7ff f987 	bl	8001dfc <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b64      	cmp	r3, #100	@ 0x64
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e103      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	4b75      	ldr	r3, [pc, #468]	@ (8002cd4 <HAL_RCC_OscConfig+0x4c8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x312>
 8002b10:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4a6e      	ldr	r2, [pc, #440]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6213      	str	r3, [r2, #32]
 8002b1c:	e02d      	b.n	8002b7a <HAL_RCC_OscConfig+0x36e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x334>
 8002b26:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	4a69      	ldr	r2, [pc, #420]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	6213      	str	r3, [r2, #32]
 8002b32:	4b67      	ldr	r3, [pc, #412]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a66      	ldr	r2, [pc, #408]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	f023 0304 	bic.w	r3, r3, #4
 8002b3c:	6213      	str	r3, [r2, #32]
 8002b3e:	e01c      	b.n	8002b7a <HAL_RCC_OscConfig+0x36e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d10c      	bne.n	8002b62 <HAL_RCC_OscConfig+0x356>
 8002b48:	4b61      	ldr	r3, [pc, #388]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4a60      	ldr	r2, [pc, #384]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	6213      	str	r3, [r2, #32]
 8002b54:	4b5e      	ldr	r3, [pc, #376]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a5d      	ldr	r2, [pc, #372]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	e00b      	b.n	8002b7a <HAL_RCC_OscConfig+0x36e>
 8002b62:	4b5b      	ldr	r3, [pc, #364]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a5a      	ldr	r2, [pc, #360]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	6213      	str	r3, [r2, #32]
 8002b6e:	4b58      	ldr	r3, [pc, #352]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a57      	ldr	r2, [pc, #348]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d015      	beq.n	8002bae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b82:	f7ff f93b 	bl	8001dfc <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7ff f937 	bl	8001dfc <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0b1      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ee      	beq.n	8002b8a <HAL_RCC_OscConfig+0x37e>
 8002bac:	e014      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bae:	f7ff f925 	bl	8001dfc <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7ff f921 	bl	8001dfc <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e09b      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bcc:	4b40      	ldr	r3, [pc, #256]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ee      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d105      	bne.n	8002bea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bde:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4a3b      	ldr	r2, [pc, #236]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8087 	beq.w	8002d02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf4:	4b36      	ldr	r3, [pc, #216]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d061      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d146      	bne.n	8002c96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c08:	4b33      	ldr	r3, [pc, #204]	@ (8002cd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7ff f8f5 	bl	8001dfc <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c16:	f7ff f8f1 	bl	8001dfc <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e06d      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c28:	4b29      	ldr	r3, [pc, #164]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c3c:	d108      	bne.n	8002c50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c3e:	4b24      	ldr	r3, [pc, #144]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	4921      	ldr	r1, [pc, #132]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c50:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a19      	ldr	r1, [r3, #32]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	430b      	orrs	r3, r1
 8002c62:	491b      	ldr	r1, [pc, #108]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c68:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7ff f8c5 	bl	8001dfc <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c76:	f7ff f8c1 	bl	8001dfc <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e03d      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c88:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x46a>
 8002c94:	e035      	b.n	8002d02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c96:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7ff f8ae 	bl	8001dfc <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7ff f8aa 	bl	8001dfc <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e026      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x498>
 8002cc2:	e01e      	b.n	8002d02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e019      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40007000 	.word	0x40007000
 8002cd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000

08002d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0d0      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d910      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b67      	ldr	r3, [pc, #412]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 0207 	bic.w	r2, r3, #7
 8002d3a:	4965      	ldr	r1, [pc, #404]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b63      	ldr	r3, [pc, #396]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0b8      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d020      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d6c:	4b59      	ldr	r3, [pc, #356]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4a58      	ldr	r2, [pc, #352]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d84:	4b53      	ldr	r3, [pc, #332]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a52      	ldr	r2, [pc, #328]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b50      	ldr	r3, [pc, #320]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	494d      	ldr	r1, [pc, #308]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d040      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b47      	ldr	r3, [pc, #284]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d115      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e07f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dce:	4b41      	ldr	r3, [pc, #260]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e073      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dde:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e06b      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dee:	4b39      	ldr	r3, [pc, #228]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f023 0203 	bic.w	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4936      	ldr	r1, [pc, #216]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e00:	f7fe fffc 	bl	8001dfc <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e08:	f7fe fff8 	bl	8001dfc <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e053      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 020c 	and.w	r2, r3, #12
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d1eb      	bne.n	8002e08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e30:	4b27      	ldr	r3, [pc, #156]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d210      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 0207 	bic.w	r2, r3, #7
 8002e46:	4922      	ldr	r1, [pc, #136]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b20      	ldr	r3, [pc, #128]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e032      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4916      	ldr	r1, [pc, #88]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	490e      	ldr	r1, [pc, #56]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e9e:	f000 f821 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	490a      	ldr	r1, [pc, #40]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	5ccb      	ldrb	r3, [r1, r3]
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	4a09      	ldr	r2, [pc, #36]	@ (8002edc <HAL_RCC_ClockConfig+0x1cc>)
 8002eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eba:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1d0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fc70 	bl	80017a4 <HAL_InitTick>

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40022000 	.word	0x40022000
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	08005c40 	.word	0x08005c40
 8002edc:	20000004 	.word	0x20000004
 8002ee0:	20000008 	.word	0x20000008

08002ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002efe:	4b1e      	ldr	r3, [pc, #120]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d002      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x30>
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x36>
 8002f12:	e027      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f16:	613b      	str	r3, [r7, #16]
      break;
 8002f18:	e027      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	0c9b      	lsrs	r3, r3, #18
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	4a17      	ldr	r2, [pc, #92]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f24:	5cd3      	ldrb	r3, [r2, r3]
 8002f26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d010      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f32:	4b11      	ldr	r3, [pc, #68]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	0c5b      	lsrs	r3, r3, #17
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	4a11      	ldr	r2, [pc, #68]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
 8002f40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a0d      	ldr	r2, [pc, #52]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f46:	fb03 f202 	mul.w	r2, r3, r2
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	e004      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a0c      	ldr	r2, [pc, #48]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f58:	fb02 f303 	mul.w	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	613b      	str	r3, [r7, #16]
      break;
 8002f62:	e002      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f66:	613b      	str	r3, [r7, #16]
      break;
 8002f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f6a:	693b      	ldr	r3, [r7, #16]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	007a1200 	.word	0x007a1200
 8002f80:	08005c58 	.word	0x08005c58
 8002f84:	08005c68 	.word	0x08005c68
 8002f88:	003d0900 	.word	0x003d0900

08002f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b02      	ldr	r3, [pc, #8]	@ (8002f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	20000004 	.word	0x20000004

08002fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fa4:	f7ff fff2 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	4903      	ldr	r1, [pc, #12]	@ (8002fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08005c50 	.word	0x08005c50

08002fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fcc:	f7ff ffde 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	0adb      	lsrs	r3, r3, #11
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4903      	ldr	r1, [pc, #12]	@ (8002fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fde:	5ccb      	ldrb	r3, [r1, r3]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	08005c50 	.word	0x08005c50

08002ff0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003000:	4b11      	ldr	r3, [pc, #68]	@ (8003048 <HAL_RCC_GetClockConfig+0x58>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0203 	and.w	r2, r3, #3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800300c:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <HAL_RCC_GetClockConfig+0x58>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003018:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <HAL_RCC_GetClockConfig+0x58>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003024:	4b08      	ldr	r3, [pc, #32]	@ (8003048 <HAL_RCC_GetClockConfig+0x58>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	08db      	lsrs	r3, r3, #3
 800302a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <HAL_RCC_GetClockConfig+0x5c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0207 	and.w	r2, r3, #7
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr
 8003048:	40021000 	.word	0x40021000
 800304c:	40022000 	.word	0x40022000

08003050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003058:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <RCC_Delay+0x34>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	@ (8003088 <RCC_Delay+0x38>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0a5b      	lsrs	r3, r3, #9
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800306c:	bf00      	nop
  }
  while (Delay --);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1e5a      	subs	r2, r3, #1
 8003072:	60fa      	str	r2, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f9      	bne.n	800306c <RCC_Delay+0x1c>
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	20000004 	.word	0x20000004
 8003088:	10624dd3 	.word	0x10624dd3

0800308c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e076      	b.n	800318c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030ae:	d009      	beq.n	80030c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	61da      	str	r2, [r3, #28]
 80030b6:	e005      	b.n	80030c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fe fa3a 	bl	8001558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003148:	ea42 0103 	orr.w	r1, r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003150:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	0c1a      	lsrs	r2, r3, #16
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f002 0204 	and.w	r2, r2, #4
 800316a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800317a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031a4:	f7fe fe2a 	bl	8001dfc <HAL_GetTick>
 80031a8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d001      	beq.n	80031be <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	e12a      	b.n	8003414 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_SPI_Transmit+0x36>
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e122      	b.n	8003414 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_SPI_Transmit+0x48>
 80031d8:	2302      	movs	r3, #2
 80031da:	e11b      	b.n	8003414 <HAL_SPI_Transmit+0x280>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2203      	movs	r2, #3
 80031e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	88fa      	ldrh	r2, [r7, #6]
 80031fc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	88fa      	ldrh	r2, [r7, #6]
 8003202:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800322a:	d10f      	bne.n	800324c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800323a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800324a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003256:	2b40      	cmp	r3, #64	@ 0x40
 8003258:	d007      	beq.n	800326a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003268:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003272:	d152      	bne.n	800331a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_SPI_Transmit+0xee>
 800327c:	8b7b      	ldrh	r3, [r7, #26]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d145      	bne.n	800330e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	881a      	ldrh	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003292:	1c9a      	adds	r2, r3, #2
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032a6:	e032      	b.n	800330e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d112      	bne.n	80032dc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	881a      	ldrh	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	1c9a      	adds	r2, r3, #2
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80032da:	e018      	b.n	800330e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032dc:	f7fe fd8e 	bl	8001dfc <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d803      	bhi.n	80032f4 <HAL_SPI_Transmit+0x160>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032f2:	d102      	bne.n	80032fa <HAL_SPI_Transmit+0x166>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e082      	b.n	8003414 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1c7      	bne.n	80032a8 <HAL_SPI_Transmit+0x114>
 8003318:	e053      	b.n	80033c2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_SPI_Transmit+0x194>
 8003322:	8b7b      	ldrh	r3, [r7, #26]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d147      	bne.n	80033b8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	330c      	adds	r3, #12
 8003332:	7812      	ldrb	r2, [r2, #0]
 8003334:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800334e:	e033      	b.n	80033b8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d113      	bne.n	8003386 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003384:	e018      	b.n	80033b8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003386:	f7fe fd39 	bl	8001dfc <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d803      	bhi.n	800339e <HAL_SPI_Transmit+0x20a>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800339c:	d102      	bne.n	80033a4 <HAL_SPI_Transmit+0x210>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e02d      	b.n	8003414 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1c6      	bne.n	8003350 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	6839      	ldr	r1, [r7, #0]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fcc8 	bl	8003d5c <SPI_EndRxTxTransaction>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003412:	2300      	movs	r3, #0
  }
}
 8003414:	4618      	mov	r0, r3
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	d001      	beq.n	800343c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
 800343a:	e104      	b.n	8003646 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003444:	d112      	bne.n	800346c <HAL_SPI_Receive+0x50>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10e      	bne.n	800346c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2204      	movs	r2, #4
 8003452:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f8f3 	bl	800364e <HAL_SPI_TransmitReceive>
 8003468:	4603      	mov	r3, r0
 800346a:	e0ec      	b.n	8003646 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800346c:	f7fe fcc6 	bl	8001dfc <HAL_GetTick>
 8003470:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_SPI_Receive+0x62>
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0e1      	b.n	8003646 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_SPI_Receive+0x74>
 800348c:	2302      	movs	r3, #2
 800348e:	e0da      	b.n	8003646 <HAL_SPI_Receive+0x22a>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2204      	movs	r2, #4
 800349c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	88fa      	ldrh	r2, [r7, #6]
 80034b6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034de:	d10f      	bne.n	8003500 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350a:	2b40      	cmp	r3, #64	@ 0x40
 800350c:	d007      	beq.n	800351e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d170      	bne.n	8003608 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003526:	e035      	b.n	8003594 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d115      	bne.n	8003562 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f103 020c 	add.w	r2, r3, #12
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003542:	7812      	ldrb	r2, [r2, #0]
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003560:	e018      	b.n	8003594 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003562:	f7fe fc4b 	bl	8001dfc <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d803      	bhi.n	800357a <HAL_SPI_Receive+0x15e>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003578:	d102      	bne.n	8003580 <HAL_SPI_Receive+0x164>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e058      	b.n	8003646 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1c4      	bne.n	8003528 <HAL_SPI_Receive+0x10c>
 800359e:	e038      	b.n	8003612 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d113      	bne.n	80035d6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	b292      	uxth	r2, r2
 80035ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	1c9a      	adds	r2, r3, #2
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035d4:	e018      	b.n	8003608 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d6:	f7fe fc11 	bl	8001dfc <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d803      	bhi.n	80035ee <HAL_SPI_Receive+0x1d2>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035ec:	d102      	bne.n	80035f4 <HAL_SPI_Receive+0x1d8>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e01e      	b.n	8003646 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1c6      	bne.n	80035a0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	6839      	ldr	r1, [r7, #0]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fb4e 	bl	8003cb8 <SPI_EndRxTransaction>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003644:	2300      	movs	r3, #0
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b08a      	sub	sp, #40	@ 0x28
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800365c:	2301      	movs	r3, #1
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003660:	f7fe fbcc 	bl	8001dfc <HAL_GetTick>
 8003664:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800366c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003678:	7ffb      	ldrb	r3, [r7, #31]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d00c      	beq.n	8003698 <HAL_SPI_TransmitReceive+0x4a>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003684:	d106      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x46>
 800368e:	7ffb      	ldrb	r3, [r7, #31]
 8003690:	2b04      	cmp	r3, #4
 8003692:	d001      	beq.n	8003698 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
 8003696:	e17f      	b.n	8003998 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_SPI_TransmitReceive+0x5c>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <HAL_SPI_TransmitReceive+0x5c>
 80036a4:	887b      	ldrh	r3, [r7, #2]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e174      	b.n	8003998 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_SPI_TransmitReceive+0x6e>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e16d      	b.n	8003998 <HAL_SPI_TransmitReceive+0x34a>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d003      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2205      	movs	r2, #5
 80036d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	887a      	ldrh	r2, [r7, #2]
 80036e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	887a      	ldrh	r2, [r7, #2]
 80036ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	887a      	ldrh	r2, [r7, #2]
 80036fa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003718:	2b40      	cmp	r3, #64	@ 0x40
 800371a:	d007      	beq.n	800372c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800372a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003734:	d17e      	bne.n	8003834 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_SPI_TransmitReceive+0xf6>
 800373e:	8afb      	ldrh	r3, [r7, #22]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d16c      	bne.n	800381e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003748:	881a      	ldrh	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	1c9a      	adds	r2, r3, #2
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003768:	e059      	b.n	800381e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b02      	cmp	r3, #2
 8003776:	d11b      	bne.n	80037b0 <HAL_SPI_TransmitReceive+0x162>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <HAL_SPI_TransmitReceive+0x162>
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	2b01      	cmp	r3, #1
 8003786:	d113      	bne.n	80037b0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378c:	881a      	ldrh	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003798:	1c9a      	adds	r2, r3, #2
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d119      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x1a4>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d014      	beq.n	80037f2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d2:	b292      	uxth	r2, r2
 80037d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037da:	1c9a      	adds	r2, r3, #2
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037ee:	2301      	movs	r3, #1
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037f2:	f7fe fb03 	bl	8001dfc <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fe:	429a      	cmp	r2, r3
 8003800:	d80d      	bhi.n	800381e <HAL_SPI_TransmitReceive+0x1d0>
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003808:	d009      	beq.n	800381e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e0bc      	b.n	8003998 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1a0      	bne.n	800376a <HAL_SPI_TransmitReceive+0x11c>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d19b      	bne.n	800376a <HAL_SPI_TransmitReceive+0x11c>
 8003832:	e082      	b.n	800393a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <HAL_SPI_TransmitReceive+0x1f4>
 800383c:	8afb      	ldrh	r3, [r7, #22]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d171      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	330c      	adds	r3, #12
 800384c:	7812      	ldrb	r2, [r2, #0]
 800384e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003868:	e05d      	b.n	8003926 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b02      	cmp	r3, #2
 8003876:	d11c      	bne.n	80038b2 <HAL_SPI_TransmitReceive+0x264>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d017      	beq.n	80038b2 <HAL_SPI_TransmitReceive+0x264>
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	2b01      	cmp	r3, #1
 8003886:	d114      	bne.n	80038b2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	330c      	adds	r3, #12
 8003892:	7812      	ldrb	r2, [r2, #0]
 8003894:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d119      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x2a6>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d014      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038f0:	2301      	movs	r3, #1
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038f4:	f7fe fa82 	bl	8001dfc <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003900:	429a      	cmp	r2, r3
 8003902:	d803      	bhi.n	800390c <HAL_SPI_TransmitReceive+0x2be>
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800390a:	d102      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x2c4>
 800390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e038      	b.n	8003998 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d19c      	bne.n	800386a <HAL_SPI_TransmitReceive+0x21c>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d197      	bne.n	800386a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800393a:	6a3a      	ldr	r2, [r7, #32]
 800393c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fa0c 	bl	8003d5c <SPI_EndRxTxTransaction>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e01d      	b.n	8003998 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003996:	2300      	movs	r3, #0
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3728      	adds	r7, #40	@ 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	099b      	lsrs	r3, r3, #6
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10f      	bne.n	80039e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	099b      	lsrs	r3, r3, #6
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d004      	beq.n	80039e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	4798      	blx	r3
    return;
 80039e2:	e0be      	b.n	8003b62 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_SPI_IRQHandler+0x66>
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	09db      	lsrs	r3, r3, #7
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
    return;
 8003a04:	e0ad      	b.n	8003b62 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_SPI_IRQHandler+0x80>
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80a1 	beq.w	8003b62 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 809a 	beq.w	8003b62 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	099b      	lsrs	r3, r3, #6
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d023      	beq.n	8003a82 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d011      	beq.n	8003a6a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4a:	f043 0204 	orr.w	r2, r3, #4
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	e00b      	b.n	8003a82 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	693b      	ldr	r3, [r7, #16]
        return;
 8003a80:	e06f      	b.n	8003b62 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d014      	beq.n	8003ab8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a92:	f043 0201 	orr.w	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d04f      	beq.n	8003b60 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ace:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d104      	bne.n	8003aec <HAL_SPI_IRQHandler+0x14c>
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d034      	beq.n	8003b56 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0203 	bic.w	r2, r2, #3
 8003afa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d011      	beq.n	8003b28 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b08:	4a17      	ldr	r2, [pc, #92]	@ (8003b68 <HAL_SPI_IRQHandler+0x1c8>)
 8003b0a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fac9 	bl	80020a8 <HAL_DMA_Abort_IT>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d016      	beq.n	8003b5e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b34:	4a0c      	ldr	r2, [pc, #48]	@ (8003b68 <HAL_SPI_IRQHandler+0x1c8>)
 8003b36:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe fab3 	bl	80020a8 <HAL_DMA_Abort_IT>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003b54:	e003      	b.n	8003b5e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f808 	bl	8003b6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003b5c:	e000      	b.n	8003b60 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003b5e:	bf00      	nop
    return;
 8003b60:	bf00      	nop
  }
}
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	08003b7f 	.word	0x08003b7f

08003b6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7ff ffe7 	bl	8003b6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bb8:	f7fe f920 	bl	8001dfc <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bc8:	f7fe f918 	bl	8001dfc <HAL_GetTick>
 8003bcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bce:	4b39      	ldr	r3, [pc, #228]	@ (8003cb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	015b      	lsls	r3, r3, #5
 8003bd4:	0d1b      	lsrs	r3, r3, #20
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bde:	e054      	b.n	8003c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003be6:	d050      	beq.n	8003c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003be8:	f7fe f908 	bl	8001dfc <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d902      	bls.n	8003bfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d13d      	bne.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c16:	d111      	bne.n	8003c3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c20:	d004      	beq.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c2a:	d107      	bne.n	8003c3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c44:	d10f      	bne.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e017      	b.n	8003caa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4013      	ands	r3, r2
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d19b      	bne.n	8003be0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000004 	.word	0x20000004

08003cb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ccc:	d111      	bne.n	8003cf2 <SPI_EndRxTransaction+0x3a>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cd6:	d004      	beq.n	8003ce2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce0:	d107      	bne.n	8003cf2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cf0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cfa:	d117      	bne.n	8003d2c <SPI_EndRxTransaction+0x74>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d04:	d112      	bne.n	8003d2c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2101      	movs	r1, #1
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f7ff ff49 	bl	8003ba8 <SPI_WaitFlagStateUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01a      	beq.n	8003d52 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d20:	f043 0220 	orr.w	r2, r3, #32
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e013      	b.n	8003d54 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2200      	movs	r2, #0
 8003d34:	2180      	movs	r1, #128	@ 0x80
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff ff36 	bl	8003ba8 <SPI_WaitFlagStateUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d46:	f043 0220 	orr.w	r2, r3, #32
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e000      	b.n	8003d54 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	2102      	movs	r1, #2
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7ff ff18 	bl	8003ba8 <SPI_WaitFlagStateUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d82:	f043 0220 	orr.w	r2, r3, #32
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e013      	b.n	8003db6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2180      	movs	r1, #128	@ 0x80
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff ff05 	bl	8003ba8 <SPI_WaitFlagStateUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e000      	b.n	8003db6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e041      	b.n	8003e54 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7fd fc01 	bl	80015ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f000 f9a1 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d001      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e044      	b.n	8003efe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1d      	ldr	r2, [pc, #116]	@ (8003f08 <HAL_TIM_Base_Start_IT+0xac>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d018      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f0c <HAL_TIM_Base_Start_IT+0xb0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a18      	ldr	r2, [pc, #96]	@ (8003f10 <HAL_TIM_Base_Start_IT+0xb4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a16      	ldr	r2, [pc, #88]	@ (8003f14 <HAL_TIM_Base_Start_IT+0xb8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a15      	ldr	r2, [pc, #84]	@ (8003f18 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d111      	bne.n	8003eec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b06      	cmp	r3, #6
 8003ed8:	d010      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	e007      	b.n	8003efc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40013400 	.word	0x40013400
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40000800 	.word	0x40000800
 8003f18:	40000c00 	.word	0x40000c00

08003f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d020      	beq.n	8003f80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01b      	beq.n	8003f80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0202 	mvn.w	r2, #2
 8003f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8d1 	bl	800410e <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8c4 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f8d3 	bl	8004120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d020      	beq.n	8003fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01b      	beq.n	8003fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0204 	mvn.w	r2, #4
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f8ab 	bl	800410e <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f89e 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f8ad 	bl	8004120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d020      	beq.n	8004018 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01b      	beq.n	8004018 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0208 	mvn.w	r2, #8
 8003fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2204      	movs	r2, #4
 8003fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f885 	bl	800410e <HAL_TIM_IC_CaptureCallback>
 8004004:	e005      	b.n	8004012 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f878 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f887 	bl	8004120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b00      	cmp	r3, #0
 8004020:	d020      	beq.n	8004064 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01b      	beq.n	8004064 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0210 	mvn.w	r2, #16
 8004034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2208      	movs	r2, #8
 800403a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f85f 	bl	800410e <HAL_TIM_IC_CaptureCallback>
 8004050:	e005      	b.n	800405e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f852 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f861 	bl	8004120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00c      	beq.n	8004088 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0201 	mvn.w	r2, #1
 8004080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fc fa96 	bl	80005b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00c      	beq.n	80040ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f947 	bl	800433a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f831 	bl	8004132 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00c      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0220 	mvn.w	r2, #32
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f91a 	bl	8004328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a39      	ldr	r2, [pc, #228]	@ (800423c <TIM_Base_SetConfig+0xf8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a38      	ldr	r2, [pc, #224]	@ (8004240 <TIM_Base_SetConfig+0xfc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00f      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416a:	d00b      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a35      	ldr	r2, [pc, #212]	@ (8004244 <TIM_Base_SetConfig+0x100>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d007      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a34      	ldr	r2, [pc, #208]	@ (8004248 <TIM_Base_SetConfig+0x104>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d003      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a33      	ldr	r2, [pc, #204]	@ (800424c <TIM_Base_SetConfig+0x108>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d108      	bne.n	8004196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a28      	ldr	r2, [pc, #160]	@ (800423c <TIM_Base_SetConfig+0xf8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <TIM_Base_SetConfig+0x82>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a27      	ldr	r2, [pc, #156]	@ (8004240 <TIM_Base_SetConfig+0xfc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00f      	beq.n	80041c6 <TIM_Base_SetConfig+0x82>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ac:	d00b      	beq.n	80041c6 <TIM_Base_SetConfig+0x82>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a24      	ldr	r2, [pc, #144]	@ (8004244 <TIM_Base_SetConfig+0x100>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d007      	beq.n	80041c6 <TIM_Base_SetConfig+0x82>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a23      	ldr	r2, [pc, #140]	@ (8004248 <TIM_Base_SetConfig+0x104>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_Base_SetConfig+0x82>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a22      	ldr	r2, [pc, #136]	@ (800424c <TIM_Base_SetConfig+0x108>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a0f      	ldr	r2, [pc, #60]	@ (800423c <TIM_Base_SetConfig+0xf8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_Base_SetConfig+0xc8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a0e      	ldr	r2, [pc, #56]	@ (8004240 <TIM_Base_SetConfig+0xfc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d103      	bne.n	8004214 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f023 0201 	bic.w	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	611a      	str	r2, [r3, #16]
  }
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40013400 	.word	0x40013400
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800
 800424c:	40000c00 	.word	0x40000c00

08004250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004264:	2302      	movs	r3, #2
 8004266:	e050      	b.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d018      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a19      	ldr	r2, [pc, #100]	@ (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d013      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042be:	d00e      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a15      	ldr	r2, [pc, #84]	@ (800431c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d009      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a14      	ldr	r2, [pc, #80]	@ (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d004      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a12      	ldr	r2, [pc, #72]	@ (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10c      	bne.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40013400 	.word	0x40013400
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00

08004328 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e042      	b.n	80043e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd f958 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2224      	movs	r2, #36	@ 0x24
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800438e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fd0f 	bl	8004db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e024      	b.n	8004448 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2224      	movs	r2, #36	@ 0x24
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004414:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fd f98e 	bl	8001738 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	4613      	mov	r3, r2
 800445c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b20      	cmp	r3, #32
 8004468:	d112      	bne.n	8004490 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_UART_Receive_IT+0x26>
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e00b      	b.n	8004492 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	461a      	mov	r2, r3
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fac0 	bl	8004a0c <UART_Start_Receive_IT>
 800448c:	4603      	mov	r3, r0
 800448e:	e000      	b.n	8004492 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004490:	2302      	movs	r3, #2
  }
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b0ba      	sub	sp, #232	@ 0xe8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80044da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10f      	bne.n	8004502 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_UART_IRQHandler+0x66>
 80044ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fb9c 	bl	8004c38 <UART_Receive_IT>
      return;
 8004500:	e25b      	b.n	80049ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80de 	beq.w	80046c8 <HAL_UART_IRQHandler+0x22c>
 800450c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d106      	bne.n	8004526 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800451c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80d1 	beq.w	80046c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <HAL_UART_IRQHandler+0xae>
 8004532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004542:	f043 0201 	orr.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800454a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <HAL_UART_IRQHandler+0xd2>
 8004556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	f043 0202 	orr.w	r2, r3, #2
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <HAL_UART_IRQHandler+0xf6>
 800457a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	f043 0204 	orr.w	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d011      	beq.n	80045c2 <HAL_UART_IRQHandler+0x126>
 800459e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d105      	bne.n	80045b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ba:	f043 0208 	orr.w	r2, r3, #8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 81f2 	beq.w	80049b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_UART_IRQHandler+0x14e>
 80045d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fb27 	bl	8004c38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d103      	bne.n	8004616 <HAL_UART_IRQHandler+0x17a>
 800460e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004612:	2b00      	cmp	r3, #0
 8004614:	d04f      	beq.n	80046b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa31 	bl	8004a7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d041      	beq.n	80046ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004640:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004644:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3314      	adds	r3, #20
 8004652:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004656:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800465a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800466e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1d9      	bne.n	800462a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d013      	beq.n	80046a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004682:	4a7e      	ldr	r2, [pc, #504]	@ (800487c <HAL_UART_IRQHandler+0x3e0>)
 8004684:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468a:	4618      	mov	r0, r3
 800468c:	f7fd fd0c 	bl	80020a8 <HAL_DMA_Abort_IT>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d016      	beq.n	80046c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046a0:	4610      	mov	r0, r2
 80046a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a4:	e00e      	b.n	80046c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f99c 	bl	80049e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ac:	e00a      	b.n	80046c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f998 	bl	80049e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	e006      	b.n	80046c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f994 	bl	80049e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80046c2:	e175      	b.n	80049b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c4:	bf00      	nop
    return;
 80046c6:	e173      	b.n	80049b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	f040 814f 	bne.w	8004970 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8148 	beq.w	8004970 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 8141 	beq.w	8004970 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046ee:	2300      	movs	r3, #0
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80b6 	beq.w	8004880 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004720:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8145 	beq.w	80049b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800472e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004732:	429a      	cmp	r2, r3
 8004734:	f080 813e 	bcs.w	80049b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800473e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b20      	cmp	r3, #32
 8004748:	f000 8088 	beq.w	800485c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	330c      	adds	r3, #12
 8004752:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004762:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004766:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800476a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004778:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800477c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004784:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004790:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1d9      	bne.n	800474c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3314      	adds	r3, #20
 800479e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3314      	adds	r3, #20
 80047b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047bc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e1      	bne.n	8004798 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3314      	adds	r3, #20
 80047f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80047f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80047fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004806:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e3      	bne.n	80047d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800482a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800482c:	f023 0310 	bic.w	r3, r3, #16
 8004830:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800483e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004840:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004844:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800484c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e3      	bne.n	800481a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd fbeb 	bl	8002032 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800486a:	b29b      	uxth	r3, r3
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	b29b      	uxth	r3, r3
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f8bf 	bl	80049f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004878:	e09c      	b.n	80049b4 <HAL_UART_IRQHandler+0x518>
 800487a:	bf00      	nop
 800487c:	08004b43 	.word	0x08004b43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004888:	b29b      	uxth	r3, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 808e 	beq.w	80049b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800489c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8089 	beq.w	80049b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	330c      	adds	r3, #12
 80048c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80048ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80048cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e3      	bne.n	80048a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3314      	adds	r3, #20
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	623b      	str	r3, [r7, #32]
   return(result);
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3314      	adds	r3, #20
 80048fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004902:	633a      	str	r2, [r7, #48]	@ 0x30
 8004904:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e3      	bne.n	80048de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	330c      	adds	r3, #12
 800492a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	60fb      	str	r3, [r7, #12]
   return(result);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0310 	bic.w	r3, r3, #16
 800493a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004948:	61fa      	str	r2, [r7, #28]
 800494a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	69b9      	ldr	r1, [r7, #24]
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	617b      	str	r3, [r7, #20]
   return(result);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e3      	bne.n	8004924 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004962:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004966:	4619      	mov	r1, r3
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f844 	bl	80049f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800496e:	e023      	b.n	80049b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004978:	2b00      	cmp	r3, #0
 800497a:	d009      	beq.n	8004990 <HAL_UART_IRQHandler+0x4f4>
 800497c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8ee 	bl	8004b6a <UART_Transmit_IT>
    return;
 800498e:	e014      	b.n	80049ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00e      	beq.n	80049ba <HAL_UART_IRQHandler+0x51e>
 800499c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f92d 	bl	8004c08 <UART_EndTransmit_IT>
    return;
 80049ae:	e004      	b.n	80049ba <HAL_UART_IRQHandler+0x51e>
    return;
 80049b0:	bf00      	nop
 80049b2:	e002      	b.n	80049ba <HAL_UART_IRQHandler+0x51e>
      return;
 80049b4:	bf00      	nop
 80049b6:	e000      	b.n	80049ba <HAL_UART_IRQHandler+0x51e>
      return;
 80049b8:	bf00      	nop
  }
}
 80049ba:	37e8      	adds	r7, #232	@ 0xe8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr

080049d2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	460b      	mov	r3, r1
 8004a00:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	88fa      	ldrh	r2, [r7, #6]
 8004a24:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	88fa      	ldrh	r2, [r7, #6]
 8004a2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2222      	movs	r2, #34	@ 0x22
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0201 	orr.w	r2, r2, #1
 8004a60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0220 	orr.w	r2, r2, #32
 8004a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b095      	sub	sp, #84	@ 0x54
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	330c      	adds	r3, #12
 8004a8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aa6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e5      	bne.n	8004a86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3314      	adds	r3, #20
 8004ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004adc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e5      	bne.n	8004aba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d119      	bne.n	8004b2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f023 0310 	bic.w	r3, r3, #16
 8004b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	330c      	adds	r3, #12
 8004b14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b16:	61ba      	str	r2, [r7, #24]
 8004b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	6979      	ldr	r1, [r7, #20]
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	613b      	str	r3, [r7, #16]
   return(result);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e5      	bne.n	8004af6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b38:	bf00      	nop
 8004b3a:	3754      	adds	r7, #84	@ 0x54
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr

08004b42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff ff41 	bl	80049e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b21      	cmp	r3, #33	@ 0x21
 8004b7c:	d13e      	bne.n	8004bfc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b86:	d114      	bne.n	8004bb2 <UART_Transmit_IT+0x48>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d110      	bne.n	8004bb2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	1c9a      	adds	r2, r3, #2
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	621a      	str	r2, [r3, #32]
 8004bb0:	e008      	b.n	8004bc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	1c59      	adds	r1, r3, #1
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6211      	str	r1, [r2, #32]
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10f      	bne.n	8004bf8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004be6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bf6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e000      	b.n	8004bfe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bfc:	2302      	movs	r3, #2
  }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fec9 	bl	80049c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08c      	sub	sp, #48	@ 0x30
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b22      	cmp	r3, #34	@ 0x22
 8004c4a:	f040 80ae 	bne.w	8004daa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c56:	d117      	bne.n	8004c88 <UART_Receive_IT+0x50>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d113      	bne.n	8004c88 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c80:	1c9a      	adds	r2, r3, #2
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c86:	e026      	b.n	8004cd6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9a:	d007      	beq.n	8004cac <UART_Receive_IT+0x74>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <UART_Receive_IT+0x82>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	e008      	b.n	8004ccc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d15d      	bne.n	8004da6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0220 	bic.w	r2, r2, #32
 8004cf8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d135      	bne.n	8004d9c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	613b      	str	r3, [r7, #16]
   return(result);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f023 0310 	bic.w	r3, r3, #16
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d56:	623a      	str	r2, [r7, #32]
 8004d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	69f9      	ldr	r1, [r7, #28]
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e5      	bne.n	8004d36 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d10a      	bne.n	8004d8e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff fe2e 	bl	80049f6 <HAL_UARTEx_RxEventCallback>
 8004d9a:	e002      	b.n	8004da2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff fe18 	bl	80049d2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e002      	b.n	8004dac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e000      	b.n	8004dac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004daa:	2302      	movs	r3, #2
  }
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3730      	adds	r7, #48	@ 0x30
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004dee:	f023 030c 	bic.w	r3, r3, #12
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec8 <UART_SetConfig+0x114>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7fe f8d4 	bl	8002fc8 <HAL_RCC_GetPCLK2Freq>
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	e002      	b.n	8004e2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fe f8bc 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 8004e28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009a      	lsls	r2, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e40:	4a22      	ldr	r2, [pc, #136]	@ (8004ecc <UART_SetConfig+0x118>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	0119      	lsls	r1, r3, #4
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009a      	lsls	r2, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e60:	4b1a      	ldr	r3, [pc, #104]	@ (8004ecc <UART_SetConfig+0x118>)
 8004e62:	fba3 0302 	umull	r0, r3, r3, r2
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	2064      	movs	r0, #100	@ 0x64
 8004e6a:	fb00 f303 	mul.w	r3, r0, r3
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	3332      	adds	r3, #50	@ 0x32
 8004e74:	4a15      	ldr	r2, [pc, #84]	@ (8004ecc <UART_SetConfig+0x118>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e80:	4419      	add	r1, r3
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	009a      	lsls	r2, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e98:	4b0c      	ldr	r3, [pc, #48]	@ (8004ecc <UART_SetConfig+0x118>)
 8004e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	2064      	movs	r0, #100	@ 0x64
 8004ea2:	fb00 f303 	mul.w	r3, r0, r3
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	3332      	adds	r3, #50	@ 0x32
 8004eac:	4a07      	ldr	r2, [pc, #28]	@ (8004ecc <UART_SetConfig+0x118>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	f003 020f 	and.w	r2, r3, #15
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40013800 	.word	0x40013800
 8004ecc:	51eb851f 	.word	0x51eb851f

08004ed0 <_ZdaPv>:
 8004ed0:	f000 b80a 	b.w	8004ee8 <_ZdlPv>

08004ed4 <_ZSt15get_new_handlerv>:
 8004ed4:	4b02      	ldr	r3, [pc, #8]	@ (8004ee0 <_ZSt15get_new_handlerv+0xc>)
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	f3bf 8f5b 	dmb	ish
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000a44 	.word	0x20000a44

08004ee4 <_ZnajRKSt9nothrow_t>:
 8004ee4:	f000 b802 	b.w	8004eec <_Znaj>

08004ee8 <_ZdlPv>:
 8004ee8:	f000 b822 	b.w	8004f30 <free>

08004eec <_Znaj>:
 8004eec:	f000 b800 	b.w	8004ef0 <_Znwj>

08004ef0 <_Znwj>:
 8004ef0:	2801      	cmp	r0, #1
 8004ef2:	bf38      	it	cc
 8004ef4:	2001      	movcc	r0, #1
 8004ef6:	b510      	push	{r4, lr}
 8004ef8:	4604      	mov	r4, r0
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 f810 	bl	8004f20 <malloc>
 8004f00:	b100      	cbz	r0, 8004f04 <_Znwj+0x14>
 8004f02:	bd10      	pop	{r4, pc}
 8004f04:	f7ff ffe6 	bl	8004ed4 <_ZSt15get_new_handlerv>
 8004f08:	b908      	cbnz	r0, 8004f0e <_Znwj+0x1e>
 8004f0a:	f000 f802 	bl	8004f12 <abort>
 8004f0e:	4780      	blx	r0
 8004f10:	e7f3      	b.n	8004efa <_Znwj+0xa>

08004f12 <abort>:
 8004f12:	2006      	movs	r0, #6
 8004f14:	b508      	push	{r3, lr}
 8004f16:	f000 f911 	bl	800513c <raise>
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	f7fc fd37 	bl	800198e <_exit>

08004f20 <malloc>:
 8004f20:	4b02      	ldr	r3, [pc, #8]	@ (8004f2c <malloc+0xc>)
 8004f22:	4601      	mov	r1, r0
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	f000 b82d 	b.w	8004f84 <_malloc_r>
 8004f2a:	bf00      	nop
 8004f2c:	20000010 	.word	0x20000010

08004f30 <free>:
 8004f30:	4b02      	ldr	r3, [pc, #8]	@ (8004f3c <free+0xc>)
 8004f32:	4601      	mov	r1, r0
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	f000 b959 	b.w	80051ec <_free_r>
 8004f3a:	bf00      	nop
 8004f3c:	20000010 	.word	0x20000010

08004f40 <sbrk_aligned>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	4e0f      	ldr	r6, [pc, #60]	@ (8004f80 <sbrk_aligned+0x40>)
 8004f44:	460c      	mov	r4, r1
 8004f46:	6831      	ldr	r1, [r6, #0]
 8004f48:	4605      	mov	r5, r0
 8004f4a:	b911      	cbnz	r1, 8004f52 <sbrk_aligned+0x12>
 8004f4c:	f000 f912 	bl	8005174 <_sbrk_r>
 8004f50:	6030      	str	r0, [r6, #0]
 8004f52:	4621      	mov	r1, r4
 8004f54:	4628      	mov	r0, r5
 8004f56:	f000 f90d 	bl	8005174 <_sbrk_r>
 8004f5a:	1c43      	adds	r3, r0, #1
 8004f5c:	d103      	bne.n	8004f66 <sbrk_aligned+0x26>
 8004f5e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004f62:	4620      	mov	r0, r4
 8004f64:	bd70      	pop	{r4, r5, r6, pc}
 8004f66:	1cc4      	adds	r4, r0, #3
 8004f68:	f024 0403 	bic.w	r4, r4, #3
 8004f6c:	42a0      	cmp	r0, r4
 8004f6e:	d0f8      	beq.n	8004f62 <sbrk_aligned+0x22>
 8004f70:	1a21      	subs	r1, r4, r0
 8004f72:	4628      	mov	r0, r5
 8004f74:	f000 f8fe 	bl	8005174 <_sbrk_r>
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d1f2      	bne.n	8004f62 <sbrk_aligned+0x22>
 8004f7c:	e7ef      	b.n	8004f5e <sbrk_aligned+0x1e>
 8004f7e:	bf00      	nop
 8004f80:	20000a48 	.word	0x20000a48

08004f84 <_malloc_r>:
 8004f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f88:	1ccd      	adds	r5, r1, #3
 8004f8a:	f025 0503 	bic.w	r5, r5, #3
 8004f8e:	3508      	adds	r5, #8
 8004f90:	2d0c      	cmp	r5, #12
 8004f92:	bf38      	it	cc
 8004f94:	250c      	movcc	r5, #12
 8004f96:	2d00      	cmp	r5, #0
 8004f98:	4606      	mov	r6, r0
 8004f9a:	db01      	blt.n	8004fa0 <_malloc_r+0x1c>
 8004f9c:	42a9      	cmp	r1, r5
 8004f9e:	d904      	bls.n	8004faa <_malloc_r+0x26>
 8004fa0:	230c      	movs	r3, #12
 8004fa2:	6033      	str	r3, [r6, #0]
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004faa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005080 <_malloc_r+0xfc>
 8004fae:	f000 f869 	bl	8005084 <__malloc_lock>
 8004fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8004fb6:	461c      	mov	r4, r3
 8004fb8:	bb44      	cbnz	r4, 800500c <_malloc_r+0x88>
 8004fba:	4629      	mov	r1, r5
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f7ff ffbf 	bl	8004f40 <sbrk_aligned>
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	d158      	bne.n	800507a <_malloc_r+0xf6>
 8004fc8:	f8d8 4000 	ldr.w	r4, [r8]
 8004fcc:	4627      	mov	r7, r4
 8004fce:	2f00      	cmp	r7, #0
 8004fd0:	d143      	bne.n	800505a <_malloc_r+0xd6>
 8004fd2:	2c00      	cmp	r4, #0
 8004fd4:	d04b      	beq.n	800506e <_malloc_r+0xea>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	4639      	mov	r1, r7
 8004fda:	4630      	mov	r0, r6
 8004fdc:	eb04 0903 	add.w	r9, r4, r3
 8004fe0:	f000 f8c8 	bl	8005174 <_sbrk_r>
 8004fe4:	4581      	cmp	r9, r0
 8004fe6:	d142      	bne.n	800506e <_malloc_r+0xea>
 8004fe8:	6821      	ldr	r1, [r4, #0]
 8004fea:	4630      	mov	r0, r6
 8004fec:	1a6d      	subs	r5, r5, r1
 8004fee:	4629      	mov	r1, r5
 8004ff0:	f7ff ffa6 	bl	8004f40 <sbrk_aligned>
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d03a      	beq.n	800506e <_malloc_r+0xea>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	442b      	add	r3, r5
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	bb62      	cbnz	r2, 8005060 <_malloc_r+0xdc>
 8005006:	f8c8 7000 	str.w	r7, [r8]
 800500a:	e00f      	b.n	800502c <_malloc_r+0xa8>
 800500c:	6822      	ldr	r2, [r4, #0]
 800500e:	1b52      	subs	r2, r2, r5
 8005010:	d420      	bmi.n	8005054 <_malloc_r+0xd0>
 8005012:	2a0b      	cmp	r2, #11
 8005014:	d917      	bls.n	8005046 <_malloc_r+0xc2>
 8005016:	1961      	adds	r1, r4, r5
 8005018:	42a3      	cmp	r3, r4
 800501a:	6025      	str	r5, [r4, #0]
 800501c:	bf18      	it	ne
 800501e:	6059      	strne	r1, [r3, #4]
 8005020:	6863      	ldr	r3, [r4, #4]
 8005022:	bf08      	it	eq
 8005024:	f8c8 1000 	streq.w	r1, [r8]
 8005028:	5162      	str	r2, [r4, r5]
 800502a:	604b      	str	r3, [r1, #4]
 800502c:	4630      	mov	r0, r6
 800502e:	f000 f82f 	bl	8005090 <__malloc_unlock>
 8005032:	f104 000b 	add.w	r0, r4, #11
 8005036:	1d23      	adds	r3, r4, #4
 8005038:	f020 0007 	bic.w	r0, r0, #7
 800503c:	1ac2      	subs	r2, r0, r3
 800503e:	bf1c      	itt	ne
 8005040:	1a1b      	subne	r3, r3, r0
 8005042:	50a3      	strne	r3, [r4, r2]
 8005044:	e7af      	b.n	8004fa6 <_malloc_r+0x22>
 8005046:	6862      	ldr	r2, [r4, #4]
 8005048:	42a3      	cmp	r3, r4
 800504a:	bf0c      	ite	eq
 800504c:	f8c8 2000 	streq.w	r2, [r8]
 8005050:	605a      	strne	r2, [r3, #4]
 8005052:	e7eb      	b.n	800502c <_malloc_r+0xa8>
 8005054:	4623      	mov	r3, r4
 8005056:	6864      	ldr	r4, [r4, #4]
 8005058:	e7ae      	b.n	8004fb8 <_malloc_r+0x34>
 800505a:	463c      	mov	r4, r7
 800505c:	687f      	ldr	r7, [r7, #4]
 800505e:	e7b6      	b.n	8004fce <_malloc_r+0x4a>
 8005060:	461a      	mov	r2, r3
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	42a3      	cmp	r3, r4
 8005066:	d1fb      	bne.n	8005060 <_malloc_r+0xdc>
 8005068:	2300      	movs	r3, #0
 800506a:	6053      	str	r3, [r2, #4]
 800506c:	e7de      	b.n	800502c <_malloc_r+0xa8>
 800506e:	230c      	movs	r3, #12
 8005070:	4630      	mov	r0, r6
 8005072:	6033      	str	r3, [r6, #0]
 8005074:	f000 f80c 	bl	8005090 <__malloc_unlock>
 8005078:	e794      	b.n	8004fa4 <_malloc_r+0x20>
 800507a:	6005      	str	r5, [r0, #0]
 800507c:	e7d6      	b.n	800502c <_malloc_r+0xa8>
 800507e:	bf00      	nop
 8005080:	20000a4c 	.word	0x20000a4c

08005084 <__malloc_lock>:
 8005084:	4801      	ldr	r0, [pc, #4]	@ (800508c <__malloc_lock+0x8>)
 8005086:	f000 b8af 	b.w	80051e8 <__retarget_lock_acquire_recursive>
 800508a:	bf00      	nop
 800508c:	20000b8c 	.word	0x20000b8c

08005090 <__malloc_unlock>:
 8005090:	4801      	ldr	r0, [pc, #4]	@ (8005098 <__malloc_unlock+0x8>)
 8005092:	f000 b8aa 	b.w	80051ea <__retarget_lock_release_recursive>
 8005096:	bf00      	nop
 8005098:	20000b8c 	.word	0x20000b8c

0800509c <_vsiprintf_r>:
 800509c:	b510      	push	{r4, lr}
 800509e:	b09a      	sub	sp, #104	@ 0x68
 80050a0:	9100      	str	r1, [sp, #0]
 80050a2:	9104      	str	r1, [sp, #16]
 80050a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050a8:	2400      	movs	r4, #0
 80050aa:	9105      	str	r1, [sp, #20]
 80050ac:	9102      	str	r1, [sp, #8]
 80050ae:	4905      	ldr	r1, [pc, #20]	@ (80050c4 <_vsiprintf_r+0x28>)
 80050b0:	9419      	str	r4, [sp, #100]	@ 0x64
 80050b2:	9103      	str	r1, [sp, #12]
 80050b4:	4669      	mov	r1, sp
 80050b6:	f000 f93d 	bl	8005334 <_svfiprintf_r>
 80050ba:	9b00      	ldr	r3, [sp, #0]
 80050bc:	701c      	strb	r4, [r3, #0]
 80050be:	b01a      	add	sp, #104	@ 0x68
 80050c0:	bd10      	pop	{r4, pc}
 80050c2:	bf00      	nop
 80050c4:	ffff0208 	.word	0xffff0208

080050c8 <vsiprintf>:
 80050c8:	4613      	mov	r3, r2
 80050ca:	460a      	mov	r2, r1
 80050cc:	4601      	mov	r1, r0
 80050ce:	4802      	ldr	r0, [pc, #8]	@ (80050d8 <vsiprintf+0x10>)
 80050d0:	6800      	ldr	r0, [r0, #0]
 80050d2:	f7ff bfe3 	b.w	800509c <_vsiprintf_r>
 80050d6:	bf00      	nop
 80050d8:	20000010 	.word	0x20000010

080050dc <memset>:
 80050dc:	4603      	mov	r3, r0
 80050de:	4402      	add	r2, r0
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d100      	bne.n	80050e6 <memset+0xa>
 80050e4:	4770      	bx	lr
 80050e6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ea:	e7f9      	b.n	80050e0 <memset+0x4>

080050ec <_raise_r>:
 80050ec:	291f      	cmp	r1, #31
 80050ee:	b538      	push	{r3, r4, r5, lr}
 80050f0:	4605      	mov	r5, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	d904      	bls.n	8005100 <_raise_r+0x14>
 80050f6:	2316      	movs	r3, #22
 80050f8:	6003      	str	r3, [r0, #0]
 80050fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005102:	b112      	cbz	r2, 800510a <_raise_r+0x1e>
 8005104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005108:	b94b      	cbnz	r3, 800511e <_raise_r+0x32>
 800510a:	4628      	mov	r0, r5
 800510c:	f000 f830 	bl	8005170 <_getpid_r>
 8005110:	4622      	mov	r2, r4
 8005112:	4601      	mov	r1, r0
 8005114:	4628      	mov	r0, r5
 8005116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800511a:	f000 b817 	b.w	800514c <_kill_r>
 800511e:	2b01      	cmp	r3, #1
 8005120:	d00a      	beq.n	8005138 <_raise_r+0x4c>
 8005122:	1c59      	adds	r1, r3, #1
 8005124:	d103      	bne.n	800512e <_raise_r+0x42>
 8005126:	2316      	movs	r3, #22
 8005128:	6003      	str	r3, [r0, #0]
 800512a:	2001      	movs	r0, #1
 800512c:	e7e7      	b.n	80050fe <_raise_r+0x12>
 800512e:	2100      	movs	r1, #0
 8005130:	4620      	mov	r0, r4
 8005132:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005136:	4798      	blx	r3
 8005138:	2000      	movs	r0, #0
 800513a:	e7e0      	b.n	80050fe <_raise_r+0x12>

0800513c <raise>:
 800513c:	4b02      	ldr	r3, [pc, #8]	@ (8005148 <raise+0xc>)
 800513e:	4601      	mov	r1, r0
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	f7ff bfd3 	b.w	80050ec <_raise_r>
 8005146:	bf00      	nop
 8005148:	20000010 	.word	0x20000010

0800514c <_kill_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	2300      	movs	r3, #0
 8005150:	4d06      	ldr	r5, [pc, #24]	@ (800516c <_kill_r+0x20>)
 8005152:	4604      	mov	r4, r0
 8005154:	4608      	mov	r0, r1
 8005156:	4611      	mov	r1, r2
 8005158:	602b      	str	r3, [r5, #0]
 800515a:	f7fc fc08 	bl	800196e <_kill>
 800515e:	1c43      	adds	r3, r0, #1
 8005160:	d102      	bne.n	8005168 <_kill_r+0x1c>
 8005162:	682b      	ldr	r3, [r5, #0]
 8005164:	b103      	cbz	r3, 8005168 <_kill_r+0x1c>
 8005166:	6023      	str	r3, [r4, #0]
 8005168:	bd38      	pop	{r3, r4, r5, pc}
 800516a:	bf00      	nop
 800516c:	20000b88 	.word	0x20000b88

08005170 <_getpid_r>:
 8005170:	f7fc bbf6 	b.w	8001960 <_getpid>

08005174 <_sbrk_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	2300      	movs	r3, #0
 8005178:	4d05      	ldr	r5, [pc, #20]	@ (8005190 <_sbrk_r+0x1c>)
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	f7fc fc10 	bl	80019a4 <_sbrk>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <_sbrk_r+0x1a>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	b103      	cbz	r3, 800518e <_sbrk_r+0x1a>
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	20000b88 	.word	0x20000b88

08005194 <__errno>:
 8005194:	4b01      	ldr	r3, [pc, #4]	@ (800519c <__errno+0x8>)
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	20000010 	.word	0x20000010

080051a0 <__libc_init_array>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	2600      	movs	r6, #0
 80051a4:	4d0c      	ldr	r5, [pc, #48]	@ (80051d8 <__libc_init_array+0x38>)
 80051a6:	4c0d      	ldr	r4, [pc, #52]	@ (80051dc <__libc_init_array+0x3c>)
 80051a8:	1b64      	subs	r4, r4, r5
 80051aa:	10a4      	asrs	r4, r4, #2
 80051ac:	42a6      	cmp	r6, r4
 80051ae:	d109      	bne.n	80051c4 <__libc_init_array+0x24>
 80051b0:	f000 fbb8 	bl	8005924 <_init>
 80051b4:	2600      	movs	r6, #0
 80051b6:	4d0a      	ldr	r5, [pc, #40]	@ (80051e0 <__libc_init_array+0x40>)
 80051b8:	4c0a      	ldr	r4, [pc, #40]	@ (80051e4 <__libc_init_array+0x44>)
 80051ba:	1b64      	subs	r4, r4, r5
 80051bc:	10a4      	asrs	r4, r4, #2
 80051be:	42a6      	cmp	r6, r4
 80051c0:	d105      	bne.n	80051ce <__libc_init_array+0x2e>
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c8:	4798      	blx	r3
 80051ca:	3601      	adds	r6, #1
 80051cc:	e7ee      	b.n	80051ac <__libc_init_array+0xc>
 80051ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d2:	4798      	blx	r3
 80051d4:	3601      	adds	r6, #1
 80051d6:	e7f2      	b.n	80051be <__libc_init_array+0x1e>
 80051d8:	08005ca8 	.word	0x08005ca8
 80051dc:	08005ca8 	.word	0x08005ca8
 80051e0:	08005ca8 	.word	0x08005ca8
 80051e4:	08005cb0 	.word	0x08005cb0

080051e8 <__retarget_lock_acquire_recursive>:
 80051e8:	4770      	bx	lr

080051ea <__retarget_lock_release_recursive>:
 80051ea:	4770      	bx	lr

080051ec <_free_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4605      	mov	r5, r0
 80051f0:	2900      	cmp	r1, #0
 80051f2:	d040      	beq.n	8005276 <_free_r+0x8a>
 80051f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f8:	1f0c      	subs	r4, r1, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bfb8      	it	lt
 80051fe:	18e4      	addlt	r4, r4, r3
 8005200:	f7ff ff40 	bl	8005084 <__malloc_lock>
 8005204:	4a1c      	ldr	r2, [pc, #112]	@ (8005278 <_free_r+0x8c>)
 8005206:	6813      	ldr	r3, [r2, #0]
 8005208:	b933      	cbnz	r3, 8005218 <_free_r+0x2c>
 800520a:	6063      	str	r3, [r4, #4]
 800520c:	6014      	str	r4, [r2, #0]
 800520e:	4628      	mov	r0, r5
 8005210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005214:	f7ff bf3c 	b.w	8005090 <__malloc_unlock>
 8005218:	42a3      	cmp	r3, r4
 800521a:	d908      	bls.n	800522e <_free_r+0x42>
 800521c:	6820      	ldr	r0, [r4, #0]
 800521e:	1821      	adds	r1, r4, r0
 8005220:	428b      	cmp	r3, r1
 8005222:	bf01      	itttt	eq
 8005224:	6819      	ldreq	r1, [r3, #0]
 8005226:	685b      	ldreq	r3, [r3, #4]
 8005228:	1809      	addeq	r1, r1, r0
 800522a:	6021      	streq	r1, [r4, #0]
 800522c:	e7ed      	b.n	800520a <_free_r+0x1e>
 800522e:	461a      	mov	r2, r3
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	b10b      	cbz	r3, 8005238 <_free_r+0x4c>
 8005234:	42a3      	cmp	r3, r4
 8005236:	d9fa      	bls.n	800522e <_free_r+0x42>
 8005238:	6811      	ldr	r1, [r2, #0]
 800523a:	1850      	adds	r0, r2, r1
 800523c:	42a0      	cmp	r0, r4
 800523e:	d10b      	bne.n	8005258 <_free_r+0x6c>
 8005240:	6820      	ldr	r0, [r4, #0]
 8005242:	4401      	add	r1, r0
 8005244:	1850      	adds	r0, r2, r1
 8005246:	4283      	cmp	r3, r0
 8005248:	6011      	str	r1, [r2, #0]
 800524a:	d1e0      	bne.n	800520e <_free_r+0x22>
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4408      	add	r0, r1
 8005252:	6010      	str	r0, [r2, #0]
 8005254:	6053      	str	r3, [r2, #4]
 8005256:	e7da      	b.n	800520e <_free_r+0x22>
 8005258:	d902      	bls.n	8005260 <_free_r+0x74>
 800525a:	230c      	movs	r3, #12
 800525c:	602b      	str	r3, [r5, #0]
 800525e:	e7d6      	b.n	800520e <_free_r+0x22>
 8005260:	6820      	ldr	r0, [r4, #0]
 8005262:	1821      	adds	r1, r4, r0
 8005264:	428b      	cmp	r3, r1
 8005266:	bf01      	itttt	eq
 8005268:	6819      	ldreq	r1, [r3, #0]
 800526a:	685b      	ldreq	r3, [r3, #4]
 800526c:	1809      	addeq	r1, r1, r0
 800526e:	6021      	streq	r1, [r4, #0]
 8005270:	6063      	str	r3, [r4, #4]
 8005272:	6054      	str	r4, [r2, #4]
 8005274:	e7cb      	b.n	800520e <_free_r+0x22>
 8005276:	bd38      	pop	{r3, r4, r5, pc}
 8005278:	20000a4c 	.word	0x20000a4c

0800527c <__ssputs_r>:
 800527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	461f      	mov	r7, r3
 8005282:	688e      	ldr	r6, [r1, #8]
 8005284:	4682      	mov	sl, r0
 8005286:	42be      	cmp	r6, r7
 8005288:	460c      	mov	r4, r1
 800528a:	4690      	mov	r8, r2
 800528c:	680b      	ldr	r3, [r1, #0]
 800528e:	d82d      	bhi.n	80052ec <__ssputs_r+0x70>
 8005290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005294:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005298:	d026      	beq.n	80052e8 <__ssputs_r+0x6c>
 800529a:	6965      	ldr	r5, [r4, #20]
 800529c:	6909      	ldr	r1, [r1, #16]
 800529e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052a2:	eba3 0901 	sub.w	r9, r3, r1
 80052a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052aa:	1c7b      	adds	r3, r7, #1
 80052ac:	444b      	add	r3, r9
 80052ae:	106d      	asrs	r5, r5, #1
 80052b0:	429d      	cmp	r5, r3
 80052b2:	bf38      	it	cc
 80052b4:	461d      	movcc	r5, r3
 80052b6:	0553      	lsls	r3, r2, #21
 80052b8:	d527      	bpl.n	800530a <__ssputs_r+0x8e>
 80052ba:	4629      	mov	r1, r5
 80052bc:	f7ff fe62 	bl	8004f84 <_malloc_r>
 80052c0:	4606      	mov	r6, r0
 80052c2:	b360      	cbz	r0, 800531e <__ssputs_r+0xa2>
 80052c4:	464a      	mov	r2, r9
 80052c6:	6921      	ldr	r1, [r4, #16]
 80052c8:	f000 fae8 	bl	800589c <memcpy>
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80052d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	6126      	str	r6, [r4, #16]
 80052da:	444e      	add	r6, r9
 80052dc:	6026      	str	r6, [r4, #0]
 80052de:	463e      	mov	r6, r7
 80052e0:	6165      	str	r5, [r4, #20]
 80052e2:	eba5 0509 	sub.w	r5, r5, r9
 80052e6:	60a5      	str	r5, [r4, #8]
 80052e8:	42be      	cmp	r6, r7
 80052ea:	d900      	bls.n	80052ee <__ssputs_r+0x72>
 80052ec:	463e      	mov	r6, r7
 80052ee:	4632      	mov	r2, r6
 80052f0:	4641      	mov	r1, r8
 80052f2:	6820      	ldr	r0, [r4, #0]
 80052f4:	f000 faaa 	bl	800584c <memmove>
 80052f8:	2000      	movs	r0, #0
 80052fa:	68a3      	ldr	r3, [r4, #8]
 80052fc:	1b9b      	subs	r3, r3, r6
 80052fe:	60a3      	str	r3, [r4, #8]
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	4433      	add	r3, r6
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530a:	462a      	mov	r2, r5
 800530c:	f000 fad4 	bl	80058b8 <_realloc_r>
 8005310:	4606      	mov	r6, r0
 8005312:	2800      	cmp	r0, #0
 8005314:	d1e0      	bne.n	80052d8 <__ssputs_r+0x5c>
 8005316:	4650      	mov	r0, sl
 8005318:	6921      	ldr	r1, [r4, #16]
 800531a:	f7ff ff67 	bl	80051ec <_free_r>
 800531e:	230c      	movs	r3, #12
 8005320:	f8ca 3000 	str.w	r3, [sl]
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800532a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	e7e9      	b.n	8005306 <__ssputs_r+0x8a>
	...

08005334 <_svfiprintf_r>:
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	4698      	mov	r8, r3
 800533a:	898b      	ldrh	r3, [r1, #12]
 800533c:	4607      	mov	r7, r0
 800533e:	061b      	lsls	r3, r3, #24
 8005340:	460d      	mov	r5, r1
 8005342:	4614      	mov	r4, r2
 8005344:	b09d      	sub	sp, #116	@ 0x74
 8005346:	d510      	bpl.n	800536a <_svfiprintf_r+0x36>
 8005348:	690b      	ldr	r3, [r1, #16]
 800534a:	b973      	cbnz	r3, 800536a <_svfiprintf_r+0x36>
 800534c:	2140      	movs	r1, #64	@ 0x40
 800534e:	f7ff fe19 	bl	8004f84 <_malloc_r>
 8005352:	6028      	str	r0, [r5, #0]
 8005354:	6128      	str	r0, [r5, #16]
 8005356:	b930      	cbnz	r0, 8005366 <_svfiprintf_r+0x32>
 8005358:	230c      	movs	r3, #12
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005360:	b01d      	add	sp, #116	@ 0x74
 8005362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005366:	2340      	movs	r3, #64	@ 0x40
 8005368:	616b      	str	r3, [r5, #20]
 800536a:	2300      	movs	r3, #0
 800536c:	9309      	str	r3, [sp, #36]	@ 0x24
 800536e:	2320      	movs	r3, #32
 8005370:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005374:	2330      	movs	r3, #48	@ 0x30
 8005376:	f04f 0901 	mov.w	r9, #1
 800537a:	f8cd 800c 	str.w	r8, [sp, #12]
 800537e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005518 <_svfiprintf_r+0x1e4>
 8005382:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005386:	4623      	mov	r3, r4
 8005388:	469a      	mov	sl, r3
 800538a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800538e:	b10a      	cbz	r2, 8005394 <_svfiprintf_r+0x60>
 8005390:	2a25      	cmp	r2, #37	@ 0x25
 8005392:	d1f9      	bne.n	8005388 <_svfiprintf_r+0x54>
 8005394:	ebba 0b04 	subs.w	fp, sl, r4
 8005398:	d00b      	beq.n	80053b2 <_svfiprintf_r+0x7e>
 800539a:	465b      	mov	r3, fp
 800539c:	4622      	mov	r2, r4
 800539e:	4629      	mov	r1, r5
 80053a0:	4638      	mov	r0, r7
 80053a2:	f7ff ff6b 	bl	800527c <__ssputs_r>
 80053a6:	3001      	adds	r0, #1
 80053a8:	f000 80a7 	beq.w	80054fa <_svfiprintf_r+0x1c6>
 80053ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053ae:	445a      	add	r2, fp
 80053b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80053b2:	f89a 3000 	ldrb.w	r3, [sl]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 809f 	beq.w	80054fa <_svfiprintf_r+0x1c6>
 80053bc:	2300      	movs	r3, #0
 80053be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c6:	f10a 0a01 	add.w	sl, sl, #1
 80053ca:	9304      	str	r3, [sp, #16]
 80053cc:	9307      	str	r3, [sp, #28]
 80053ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80053d4:	4654      	mov	r4, sl
 80053d6:	2205      	movs	r2, #5
 80053d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053dc:	484e      	ldr	r0, [pc, #312]	@ (8005518 <_svfiprintf_r+0x1e4>)
 80053de:	f000 fa4f 	bl	8005880 <memchr>
 80053e2:	9a04      	ldr	r2, [sp, #16]
 80053e4:	b9d8      	cbnz	r0, 800541e <_svfiprintf_r+0xea>
 80053e6:	06d0      	lsls	r0, r2, #27
 80053e8:	bf44      	itt	mi
 80053ea:	2320      	movmi	r3, #32
 80053ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053f0:	0711      	lsls	r1, r2, #28
 80053f2:	bf44      	itt	mi
 80053f4:	232b      	movmi	r3, #43	@ 0x2b
 80053f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053fa:	f89a 3000 	ldrb.w	r3, [sl]
 80053fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005400:	d015      	beq.n	800542e <_svfiprintf_r+0xfa>
 8005402:	4654      	mov	r4, sl
 8005404:	2000      	movs	r0, #0
 8005406:	f04f 0c0a 	mov.w	ip, #10
 800540a:	9a07      	ldr	r2, [sp, #28]
 800540c:	4621      	mov	r1, r4
 800540e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005412:	3b30      	subs	r3, #48	@ 0x30
 8005414:	2b09      	cmp	r3, #9
 8005416:	d94b      	bls.n	80054b0 <_svfiprintf_r+0x17c>
 8005418:	b1b0      	cbz	r0, 8005448 <_svfiprintf_r+0x114>
 800541a:	9207      	str	r2, [sp, #28]
 800541c:	e014      	b.n	8005448 <_svfiprintf_r+0x114>
 800541e:	eba0 0308 	sub.w	r3, r0, r8
 8005422:	fa09 f303 	lsl.w	r3, r9, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	46a2      	mov	sl, r4
 800542a:	9304      	str	r3, [sp, #16]
 800542c:	e7d2      	b.n	80053d4 <_svfiprintf_r+0xa0>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	1d19      	adds	r1, r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	9103      	str	r1, [sp, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	bfbb      	ittet	lt
 800543a:	425b      	neglt	r3, r3
 800543c:	f042 0202 	orrlt.w	r2, r2, #2
 8005440:	9307      	strge	r3, [sp, #28]
 8005442:	9307      	strlt	r3, [sp, #28]
 8005444:	bfb8      	it	lt
 8005446:	9204      	strlt	r2, [sp, #16]
 8005448:	7823      	ldrb	r3, [r4, #0]
 800544a:	2b2e      	cmp	r3, #46	@ 0x2e
 800544c:	d10a      	bne.n	8005464 <_svfiprintf_r+0x130>
 800544e:	7863      	ldrb	r3, [r4, #1]
 8005450:	2b2a      	cmp	r3, #42	@ 0x2a
 8005452:	d132      	bne.n	80054ba <_svfiprintf_r+0x186>
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	3402      	adds	r4, #2
 8005458:	1d1a      	adds	r2, r3, #4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	9203      	str	r2, [sp, #12]
 800545e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005462:	9305      	str	r3, [sp, #20]
 8005464:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800551c <_svfiprintf_r+0x1e8>
 8005468:	2203      	movs	r2, #3
 800546a:	4650      	mov	r0, sl
 800546c:	7821      	ldrb	r1, [r4, #0]
 800546e:	f000 fa07 	bl	8005880 <memchr>
 8005472:	b138      	cbz	r0, 8005484 <_svfiprintf_r+0x150>
 8005474:	2240      	movs	r2, #64	@ 0x40
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	eba0 000a 	sub.w	r0, r0, sl
 800547c:	4082      	lsls	r2, r0
 800547e:	4313      	orrs	r3, r2
 8005480:	3401      	adds	r4, #1
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005488:	2206      	movs	r2, #6
 800548a:	4825      	ldr	r0, [pc, #148]	@ (8005520 <_svfiprintf_r+0x1ec>)
 800548c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005490:	f000 f9f6 	bl	8005880 <memchr>
 8005494:	2800      	cmp	r0, #0
 8005496:	d036      	beq.n	8005506 <_svfiprintf_r+0x1d2>
 8005498:	4b22      	ldr	r3, [pc, #136]	@ (8005524 <_svfiprintf_r+0x1f0>)
 800549a:	bb1b      	cbnz	r3, 80054e4 <_svfiprintf_r+0x1b0>
 800549c:	9b03      	ldr	r3, [sp, #12]
 800549e:	3307      	adds	r3, #7
 80054a0:	f023 0307 	bic.w	r3, r3, #7
 80054a4:	3308      	adds	r3, #8
 80054a6:	9303      	str	r3, [sp, #12]
 80054a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054aa:	4433      	add	r3, r6
 80054ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ae:	e76a      	b.n	8005386 <_svfiprintf_r+0x52>
 80054b0:	460c      	mov	r4, r1
 80054b2:	2001      	movs	r0, #1
 80054b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80054b8:	e7a8      	b.n	800540c <_svfiprintf_r+0xd8>
 80054ba:	2300      	movs	r3, #0
 80054bc:	f04f 0c0a 	mov.w	ip, #10
 80054c0:	4619      	mov	r1, r3
 80054c2:	3401      	adds	r4, #1
 80054c4:	9305      	str	r3, [sp, #20]
 80054c6:	4620      	mov	r0, r4
 80054c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054cc:	3a30      	subs	r2, #48	@ 0x30
 80054ce:	2a09      	cmp	r2, #9
 80054d0:	d903      	bls.n	80054da <_svfiprintf_r+0x1a6>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0c6      	beq.n	8005464 <_svfiprintf_r+0x130>
 80054d6:	9105      	str	r1, [sp, #20]
 80054d8:	e7c4      	b.n	8005464 <_svfiprintf_r+0x130>
 80054da:	4604      	mov	r4, r0
 80054dc:	2301      	movs	r3, #1
 80054de:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e2:	e7f0      	b.n	80054c6 <_svfiprintf_r+0x192>
 80054e4:	ab03      	add	r3, sp, #12
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	462a      	mov	r2, r5
 80054ea:	4638      	mov	r0, r7
 80054ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005528 <_svfiprintf_r+0x1f4>)
 80054ee:	a904      	add	r1, sp, #16
 80054f0:	f3af 8000 	nop.w
 80054f4:	1c42      	adds	r2, r0, #1
 80054f6:	4606      	mov	r6, r0
 80054f8:	d1d6      	bne.n	80054a8 <_svfiprintf_r+0x174>
 80054fa:	89ab      	ldrh	r3, [r5, #12]
 80054fc:	065b      	lsls	r3, r3, #25
 80054fe:	f53f af2d 	bmi.w	800535c <_svfiprintf_r+0x28>
 8005502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005504:	e72c      	b.n	8005360 <_svfiprintf_r+0x2c>
 8005506:	ab03      	add	r3, sp, #12
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	462a      	mov	r2, r5
 800550c:	4638      	mov	r0, r7
 800550e:	4b06      	ldr	r3, [pc, #24]	@ (8005528 <_svfiprintf_r+0x1f4>)
 8005510:	a904      	add	r1, sp, #16
 8005512:	f000 f87d 	bl	8005610 <_printf_i>
 8005516:	e7ed      	b.n	80054f4 <_svfiprintf_r+0x1c0>
 8005518:	08005c6b 	.word	0x08005c6b
 800551c:	08005c71 	.word	0x08005c71
 8005520:	08005c75 	.word	0x08005c75
 8005524:	00000000 	.word	0x00000000
 8005528:	0800527d 	.word	0x0800527d

0800552c <_printf_common>:
 800552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	4616      	mov	r6, r2
 8005532:	4698      	mov	r8, r3
 8005534:	688a      	ldr	r2, [r1, #8]
 8005536:	690b      	ldr	r3, [r1, #16]
 8005538:	4607      	mov	r7, r0
 800553a:	4293      	cmp	r3, r2
 800553c:	bfb8      	it	lt
 800553e:	4613      	movlt	r3, r2
 8005540:	6033      	str	r3, [r6, #0]
 8005542:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005546:	460c      	mov	r4, r1
 8005548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800554c:	b10a      	cbz	r2, 8005552 <_printf_common+0x26>
 800554e:	3301      	adds	r3, #1
 8005550:	6033      	str	r3, [r6, #0]
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	0699      	lsls	r1, r3, #26
 8005556:	bf42      	ittt	mi
 8005558:	6833      	ldrmi	r3, [r6, #0]
 800555a:	3302      	addmi	r3, #2
 800555c:	6033      	strmi	r3, [r6, #0]
 800555e:	6825      	ldr	r5, [r4, #0]
 8005560:	f015 0506 	ands.w	r5, r5, #6
 8005564:	d106      	bne.n	8005574 <_printf_common+0x48>
 8005566:	f104 0a19 	add.w	sl, r4, #25
 800556a:	68e3      	ldr	r3, [r4, #12]
 800556c:	6832      	ldr	r2, [r6, #0]
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	42ab      	cmp	r3, r5
 8005572:	dc2b      	bgt.n	80055cc <_printf_common+0xa0>
 8005574:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	3b00      	subs	r3, #0
 800557c:	bf18      	it	ne
 800557e:	2301      	movne	r3, #1
 8005580:	0692      	lsls	r2, r2, #26
 8005582:	d430      	bmi.n	80055e6 <_printf_common+0xba>
 8005584:	4641      	mov	r1, r8
 8005586:	4638      	mov	r0, r7
 8005588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800558c:	47c8      	blx	r9
 800558e:	3001      	adds	r0, #1
 8005590:	d023      	beq.n	80055da <_printf_common+0xae>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	6922      	ldr	r2, [r4, #16]
 8005596:	f003 0306 	and.w	r3, r3, #6
 800559a:	2b04      	cmp	r3, #4
 800559c:	bf14      	ite	ne
 800559e:	2500      	movne	r5, #0
 80055a0:	6833      	ldreq	r3, [r6, #0]
 80055a2:	f04f 0600 	mov.w	r6, #0
 80055a6:	bf08      	it	eq
 80055a8:	68e5      	ldreq	r5, [r4, #12]
 80055aa:	f104 041a 	add.w	r4, r4, #26
 80055ae:	bf08      	it	eq
 80055b0:	1aed      	subeq	r5, r5, r3
 80055b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055b6:	bf08      	it	eq
 80055b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055bc:	4293      	cmp	r3, r2
 80055be:	bfc4      	itt	gt
 80055c0:	1a9b      	subgt	r3, r3, r2
 80055c2:	18ed      	addgt	r5, r5, r3
 80055c4:	42b5      	cmp	r5, r6
 80055c6:	d11a      	bne.n	80055fe <_printf_common+0xd2>
 80055c8:	2000      	movs	r0, #0
 80055ca:	e008      	b.n	80055de <_printf_common+0xb2>
 80055cc:	2301      	movs	r3, #1
 80055ce:	4652      	mov	r2, sl
 80055d0:	4641      	mov	r1, r8
 80055d2:	4638      	mov	r0, r7
 80055d4:	47c8      	blx	r9
 80055d6:	3001      	adds	r0, #1
 80055d8:	d103      	bne.n	80055e2 <_printf_common+0xb6>
 80055da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e2:	3501      	adds	r5, #1
 80055e4:	e7c1      	b.n	800556a <_printf_common+0x3e>
 80055e6:	2030      	movs	r0, #48	@ 0x30
 80055e8:	18e1      	adds	r1, r4, r3
 80055ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055f4:	4422      	add	r2, r4
 80055f6:	3302      	adds	r3, #2
 80055f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055fc:	e7c2      	b.n	8005584 <_printf_common+0x58>
 80055fe:	2301      	movs	r3, #1
 8005600:	4622      	mov	r2, r4
 8005602:	4641      	mov	r1, r8
 8005604:	4638      	mov	r0, r7
 8005606:	47c8      	blx	r9
 8005608:	3001      	adds	r0, #1
 800560a:	d0e6      	beq.n	80055da <_printf_common+0xae>
 800560c:	3601      	adds	r6, #1
 800560e:	e7d9      	b.n	80055c4 <_printf_common+0x98>

08005610 <_printf_i>:
 8005610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	7e0f      	ldrb	r7, [r1, #24]
 8005616:	4691      	mov	r9, r2
 8005618:	2f78      	cmp	r7, #120	@ 0x78
 800561a:	4680      	mov	r8, r0
 800561c:	460c      	mov	r4, r1
 800561e:	469a      	mov	sl, r3
 8005620:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005626:	d807      	bhi.n	8005638 <_printf_i+0x28>
 8005628:	2f62      	cmp	r7, #98	@ 0x62
 800562a:	d80a      	bhi.n	8005642 <_printf_i+0x32>
 800562c:	2f00      	cmp	r7, #0
 800562e:	f000 80d1 	beq.w	80057d4 <_printf_i+0x1c4>
 8005632:	2f58      	cmp	r7, #88	@ 0x58
 8005634:	f000 80b8 	beq.w	80057a8 <_printf_i+0x198>
 8005638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800563c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005640:	e03a      	b.n	80056b8 <_printf_i+0xa8>
 8005642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005646:	2b15      	cmp	r3, #21
 8005648:	d8f6      	bhi.n	8005638 <_printf_i+0x28>
 800564a:	a101      	add	r1, pc, #4	@ (adr r1, 8005650 <_printf_i+0x40>)
 800564c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005650:	080056a9 	.word	0x080056a9
 8005654:	080056bd 	.word	0x080056bd
 8005658:	08005639 	.word	0x08005639
 800565c:	08005639 	.word	0x08005639
 8005660:	08005639 	.word	0x08005639
 8005664:	08005639 	.word	0x08005639
 8005668:	080056bd 	.word	0x080056bd
 800566c:	08005639 	.word	0x08005639
 8005670:	08005639 	.word	0x08005639
 8005674:	08005639 	.word	0x08005639
 8005678:	08005639 	.word	0x08005639
 800567c:	080057bb 	.word	0x080057bb
 8005680:	080056e7 	.word	0x080056e7
 8005684:	08005775 	.word	0x08005775
 8005688:	08005639 	.word	0x08005639
 800568c:	08005639 	.word	0x08005639
 8005690:	080057dd 	.word	0x080057dd
 8005694:	08005639 	.word	0x08005639
 8005698:	080056e7 	.word	0x080056e7
 800569c:	08005639 	.word	0x08005639
 80056a0:	08005639 	.word	0x08005639
 80056a4:	0800577d 	.word	0x0800577d
 80056a8:	6833      	ldr	r3, [r6, #0]
 80056aa:	1d1a      	adds	r2, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6032      	str	r2, [r6, #0]
 80056b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056b8:	2301      	movs	r3, #1
 80056ba:	e09c      	b.n	80057f6 <_printf_i+0x1e6>
 80056bc:	6833      	ldr	r3, [r6, #0]
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	1d19      	adds	r1, r3, #4
 80056c2:	6031      	str	r1, [r6, #0]
 80056c4:	0606      	lsls	r6, r0, #24
 80056c6:	d501      	bpl.n	80056cc <_printf_i+0xbc>
 80056c8:	681d      	ldr	r5, [r3, #0]
 80056ca:	e003      	b.n	80056d4 <_printf_i+0xc4>
 80056cc:	0645      	lsls	r5, r0, #25
 80056ce:	d5fb      	bpl.n	80056c8 <_printf_i+0xb8>
 80056d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056d4:	2d00      	cmp	r5, #0
 80056d6:	da03      	bge.n	80056e0 <_printf_i+0xd0>
 80056d8:	232d      	movs	r3, #45	@ 0x2d
 80056da:	426d      	negs	r5, r5
 80056dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056e0:	230a      	movs	r3, #10
 80056e2:	4858      	ldr	r0, [pc, #352]	@ (8005844 <_printf_i+0x234>)
 80056e4:	e011      	b.n	800570a <_printf_i+0xfa>
 80056e6:	6821      	ldr	r1, [r4, #0]
 80056e8:	6833      	ldr	r3, [r6, #0]
 80056ea:	0608      	lsls	r0, r1, #24
 80056ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80056f0:	d402      	bmi.n	80056f8 <_printf_i+0xe8>
 80056f2:	0649      	lsls	r1, r1, #25
 80056f4:	bf48      	it	mi
 80056f6:	b2ad      	uxthmi	r5, r5
 80056f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80056fa:	6033      	str	r3, [r6, #0]
 80056fc:	bf14      	ite	ne
 80056fe:	230a      	movne	r3, #10
 8005700:	2308      	moveq	r3, #8
 8005702:	4850      	ldr	r0, [pc, #320]	@ (8005844 <_printf_i+0x234>)
 8005704:	2100      	movs	r1, #0
 8005706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800570a:	6866      	ldr	r6, [r4, #4]
 800570c:	2e00      	cmp	r6, #0
 800570e:	60a6      	str	r6, [r4, #8]
 8005710:	db05      	blt.n	800571e <_printf_i+0x10e>
 8005712:	6821      	ldr	r1, [r4, #0]
 8005714:	432e      	orrs	r6, r5
 8005716:	f021 0104 	bic.w	r1, r1, #4
 800571a:	6021      	str	r1, [r4, #0]
 800571c:	d04b      	beq.n	80057b6 <_printf_i+0x1a6>
 800571e:	4616      	mov	r6, r2
 8005720:	fbb5 f1f3 	udiv	r1, r5, r3
 8005724:	fb03 5711 	mls	r7, r3, r1, r5
 8005728:	5dc7      	ldrb	r7, [r0, r7]
 800572a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800572e:	462f      	mov	r7, r5
 8005730:	42bb      	cmp	r3, r7
 8005732:	460d      	mov	r5, r1
 8005734:	d9f4      	bls.n	8005720 <_printf_i+0x110>
 8005736:	2b08      	cmp	r3, #8
 8005738:	d10b      	bne.n	8005752 <_printf_i+0x142>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	07df      	lsls	r7, r3, #31
 800573e:	d508      	bpl.n	8005752 <_printf_i+0x142>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	6861      	ldr	r1, [r4, #4]
 8005744:	4299      	cmp	r1, r3
 8005746:	bfde      	ittt	le
 8005748:	2330      	movle	r3, #48	@ 0x30
 800574a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800574e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005752:	1b92      	subs	r2, r2, r6
 8005754:	6122      	str	r2, [r4, #16]
 8005756:	464b      	mov	r3, r9
 8005758:	4621      	mov	r1, r4
 800575a:	4640      	mov	r0, r8
 800575c:	f8cd a000 	str.w	sl, [sp]
 8005760:	aa03      	add	r2, sp, #12
 8005762:	f7ff fee3 	bl	800552c <_printf_common>
 8005766:	3001      	adds	r0, #1
 8005768:	d14a      	bne.n	8005800 <_printf_i+0x1f0>
 800576a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800576e:	b004      	add	sp, #16
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	f043 0320 	orr.w	r3, r3, #32
 800577a:	6023      	str	r3, [r4, #0]
 800577c:	2778      	movs	r7, #120	@ 0x78
 800577e:	4832      	ldr	r0, [pc, #200]	@ (8005848 <_printf_i+0x238>)
 8005780:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	6831      	ldr	r1, [r6, #0]
 8005788:	061f      	lsls	r7, r3, #24
 800578a:	f851 5b04 	ldr.w	r5, [r1], #4
 800578e:	d402      	bmi.n	8005796 <_printf_i+0x186>
 8005790:	065f      	lsls	r7, r3, #25
 8005792:	bf48      	it	mi
 8005794:	b2ad      	uxthmi	r5, r5
 8005796:	6031      	str	r1, [r6, #0]
 8005798:	07d9      	lsls	r1, r3, #31
 800579a:	bf44      	itt	mi
 800579c:	f043 0320 	orrmi.w	r3, r3, #32
 80057a0:	6023      	strmi	r3, [r4, #0]
 80057a2:	b11d      	cbz	r5, 80057ac <_printf_i+0x19c>
 80057a4:	2310      	movs	r3, #16
 80057a6:	e7ad      	b.n	8005704 <_printf_i+0xf4>
 80057a8:	4826      	ldr	r0, [pc, #152]	@ (8005844 <_printf_i+0x234>)
 80057aa:	e7e9      	b.n	8005780 <_printf_i+0x170>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	f023 0320 	bic.w	r3, r3, #32
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	e7f6      	b.n	80057a4 <_printf_i+0x194>
 80057b6:	4616      	mov	r6, r2
 80057b8:	e7bd      	b.n	8005736 <_printf_i+0x126>
 80057ba:	6833      	ldr	r3, [r6, #0]
 80057bc:	6825      	ldr	r5, [r4, #0]
 80057be:	1d18      	adds	r0, r3, #4
 80057c0:	6961      	ldr	r1, [r4, #20]
 80057c2:	6030      	str	r0, [r6, #0]
 80057c4:	062e      	lsls	r6, r5, #24
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	d501      	bpl.n	80057ce <_printf_i+0x1be>
 80057ca:	6019      	str	r1, [r3, #0]
 80057cc:	e002      	b.n	80057d4 <_printf_i+0x1c4>
 80057ce:	0668      	lsls	r0, r5, #25
 80057d0:	d5fb      	bpl.n	80057ca <_printf_i+0x1ba>
 80057d2:	8019      	strh	r1, [r3, #0]
 80057d4:	2300      	movs	r3, #0
 80057d6:	4616      	mov	r6, r2
 80057d8:	6123      	str	r3, [r4, #16]
 80057da:	e7bc      	b.n	8005756 <_printf_i+0x146>
 80057dc:	6833      	ldr	r3, [r6, #0]
 80057de:	2100      	movs	r1, #0
 80057e0:	1d1a      	adds	r2, r3, #4
 80057e2:	6032      	str	r2, [r6, #0]
 80057e4:	681e      	ldr	r6, [r3, #0]
 80057e6:	6862      	ldr	r2, [r4, #4]
 80057e8:	4630      	mov	r0, r6
 80057ea:	f000 f849 	bl	8005880 <memchr>
 80057ee:	b108      	cbz	r0, 80057f4 <_printf_i+0x1e4>
 80057f0:	1b80      	subs	r0, r0, r6
 80057f2:	6060      	str	r0, [r4, #4]
 80057f4:	6863      	ldr	r3, [r4, #4]
 80057f6:	6123      	str	r3, [r4, #16]
 80057f8:	2300      	movs	r3, #0
 80057fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057fe:	e7aa      	b.n	8005756 <_printf_i+0x146>
 8005800:	4632      	mov	r2, r6
 8005802:	4649      	mov	r1, r9
 8005804:	4640      	mov	r0, r8
 8005806:	6923      	ldr	r3, [r4, #16]
 8005808:	47d0      	blx	sl
 800580a:	3001      	adds	r0, #1
 800580c:	d0ad      	beq.n	800576a <_printf_i+0x15a>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	079b      	lsls	r3, r3, #30
 8005812:	d413      	bmi.n	800583c <_printf_i+0x22c>
 8005814:	68e0      	ldr	r0, [r4, #12]
 8005816:	9b03      	ldr	r3, [sp, #12]
 8005818:	4298      	cmp	r0, r3
 800581a:	bfb8      	it	lt
 800581c:	4618      	movlt	r0, r3
 800581e:	e7a6      	b.n	800576e <_printf_i+0x15e>
 8005820:	2301      	movs	r3, #1
 8005822:	4632      	mov	r2, r6
 8005824:	4649      	mov	r1, r9
 8005826:	4640      	mov	r0, r8
 8005828:	47d0      	blx	sl
 800582a:	3001      	adds	r0, #1
 800582c:	d09d      	beq.n	800576a <_printf_i+0x15a>
 800582e:	3501      	adds	r5, #1
 8005830:	68e3      	ldr	r3, [r4, #12]
 8005832:	9903      	ldr	r1, [sp, #12]
 8005834:	1a5b      	subs	r3, r3, r1
 8005836:	42ab      	cmp	r3, r5
 8005838:	dcf2      	bgt.n	8005820 <_printf_i+0x210>
 800583a:	e7eb      	b.n	8005814 <_printf_i+0x204>
 800583c:	2500      	movs	r5, #0
 800583e:	f104 0619 	add.w	r6, r4, #25
 8005842:	e7f5      	b.n	8005830 <_printf_i+0x220>
 8005844:	08005c7c 	.word	0x08005c7c
 8005848:	08005c8d 	.word	0x08005c8d

0800584c <memmove>:
 800584c:	4288      	cmp	r0, r1
 800584e:	b510      	push	{r4, lr}
 8005850:	eb01 0402 	add.w	r4, r1, r2
 8005854:	d902      	bls.n	800585c <memmove+0x10>
 8005856:	4284      	cmp	r4, r0
 8005858:	4623      	mov	r3, r4
 800585a:	d807      	bhi.n	800586c <memmove+0x20>
 800585c:	1e43      	subs	r3, r0, #1
 800585e:	42a1      	cmp	r1, r4
 8005860:	d008      	beq.n	8005874 <memmove+0x28>
 8005862:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800586a:	e7f8      	b.n	800585e <memmove+0x12>
 800586c:	4601      	mov	r1, r0
 800586e:	4402      	add	r2, r0
 8005870:	428a      	cmp	r2, r1
 8005872:	d100      	bne.n	8005876 <memmove+0x2a>
 8005874:	bd10      	pop	{r4, pc}
 8005876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800587a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800587e:	e7f7      	b.n	8005870 <memmove+0x24>

08005880 <memchr>:
 8005880:	4603      	mov	r3, r0
 8005882:	b510      	push	{r4, lr}
 8005884:	b2c9      	uxtb	r1, r1
 8005886:	4402      	add	r2, r0
 8005888:	4293      	cmp	r3, r2
 800588a:	4618      	mov	r0, r3
 800588c:	d101      	bne.n	8005892 <memchr+0x12>
 800588e:	2000      	movs	r0, #0
 8005890:	e003      	b.n	800589a <memchr+0x1a>
 8005892:	7804      	ldrb	r4, [r0, #0]
 8005894:	3301      	adds	r3, #1
 8005896:	428c      	cmp	r4, r1
 8005898:	d1f6      	bne.n	8005888 <memchr+0x8>
 800589a:	bd10      	pop	{r4, pc}

0800589c <memcpy>:
 800589c:	440a      	add	r2, r1
 800589e:	4291      	cmp	r1, r2
 80058a0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80058a4:	d100      	bne.n	80058a8 <memcpy+0xc>
 80058a6:	4770      	bx	lr
 80058a8:	b510      	push	{r4, lr}
 80058aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ae:	4291      	cmp	r1, r2
 80058b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058b4:	d1f9      	bne.n	80058aa <memcpy+0xe>
 80058b6:	bd10      	pop	{r4, pc}

080058b8 <_realloc_r>:
 80058b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058bc:	4607      	mov	r7, r0
 80058be:	4614      	mov	r4, r2
 80058c0:	460d      	mov	r5, r1
 80058c2:	b921      	cbnz	r1, 80058ce <_realloc_r+0x16>
 80058c4:	4611      	mov	r1, r2
 80058c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ca:	f7ff bb5b 	b.w	8004f84 <_malloc_r>
 80058ce:	b92a      	cbnz	r2, 80058dc <_realloc_r+0x24>
 80058d0:	f7ff fc8c 	bl	80051ec <_free_r>
 80058d4:	4625      	mov	r5, r4
 80058d6:	4628      	mov	r0, r5
 80058d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058dc:	f000 f81a 	bl	8005914 <_malloc_usable_size_r>
 80058e0:	4284      	cmp	r4, r0
 80058e2:	4606      	mov	r6, r0
 80058e4:	d802      	bhi.n	80058ec <_realloc_r+0x34>
 80058e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058ea:	d8f4      	bhi.n	80058d6 <_realloc_r+0x1e>
 80058ec:	4621      	mov	r1, r4
 80058ee:	4638      	mov	r0, r7
 80058f0:	f7ff fb48 	bl	8004f84 <_malloc_r>
 80058f4:	4680      	mov	r8, r0
 80058f6:	b908      	cbnz	r0, 80058fc <_realloc_r+0x44>
 80058f8:	4645      	mov	r5, r8
 80058fa:	e7ec      	b.n	80058d6 <_realloc_r+0x1e>
 80058fc:	42b4      	cmp	r4, r6
 80058fe:	4622      	mov	r2, r4
 8005900:	4629      	mov	r1, r5
 8005902:	bf28      	it	cs
 8005904:	4632      	movcs	r2, r6
 8005906:	f7ff ffc9 	bl	800589c <memcpy>
 800590a:	4629      	mov	r1, r5
 800590c:	4638      	mov	r0, r7
 800590e:	f7ff fc6d 	bl	80051ec <_free_r>
 8005912:	e7f1      	b.n	80058f8 <_realloc_r+0x40>

08005914 <_malloc_usable_size_r>:
 8005914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005918:	1f18      	subs	r0, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	bfbc      	itt	lt
 800591e:	580b      	ldrlt	r3, [r1, r0]
 8005920:	18c0      	addlt	r0, r0, r3
 8005922:	4770      	bx	lr

08005924 <_init>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	bf00      	nop
 8005928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592a:	bc08      	pop	{r3}
 800592c:	469e      	mov	lr, r3
 800592e:	4770      	bx	lr

08005930 <_fini>:
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	bf00      	nop
 8005934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005936:	bc08      	pop	{r3}
 8005938:	469e      	mov	lr, r3
 800593a:	4770      	bx	lr
